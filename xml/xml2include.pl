#!/usr/bin/perl -w

use strict;

use XML::LibXML;

my $infile = "config.xml";
my $outfile = "xmlenums.h";

usage() if @ARGV;

sub usage {
  print STDERR "Usage: xml2include.pl\n";
  print STDERR "\n";
  print STDERR "This reads '$infile' and outputs '$outfile', extracting\n";
  print STDERR "all enumeration constants that are needed at compile time.\n";
  exit 1;
}

my @output;

my $parser = XML::LibXML->new();
my $doc = $parser->parse_file($infile);
my $root = $doc->documentElement();

my @verelts = $root->getChildrenByTagName("version");
die "$0: Expected precisely one 'version' tag in input.\n" unless scalar(@verelts)==1;
parseVersion($verelts[0]);

my @enumelts = $root->getChildrenByTagName("enum");
parseEnum($_) for (@enumelts);

my $date = `date`; chomp $date;
my $host = `hostname`; chomp $host;
my $guard = uc($outfile);
$guard =~ s/^.*\///;
$guard =~ s/\./_/g;

open OUT, ">$outfile";
print OUT <<"EOF";
// $outfile - created from '$infile' by '$0'
// Created: $date on $host

// DO NOT EDIT THIS FILE. CHANGES WILL BE LOST.
// (Edit '$infile' instead, then rerun '$0'.)

#ifndef $guard
#define $guard

EOF

for (@output) {
  print OUT "$_\n";
}

print OUT <<"EOF";

#endif
EOF
close OUT;

exit 0;

sub parseVersion {
  my $base = shift;
  my $major = $base->getAttribute("major");
  my $minor = $base->getAttribute("minor");
  push @output, "#define VERSION_MAJOR $major";
  push @output, "#define VERSION_MINOR $minor";
  push @output, "";
}

sub parseEnum {
  my $base = shift;
  my $id = $base->getAttribute("id");
  #push @output,"// enum $id";
  my @items = $base->getChildrenByTagName("item");
  my @tags;
  my @vals;
  my $maxtaglen=0;
  for (@items) {
    my $tag = $_->getAttribute("tag");
    my $val = $_->getAttribute("value");
    push @tags, $tag;
    push @vals, $val;
    $maxtaglen=length($tag) if length($tag)>$maxtaglen;
  }
  for (0..$#tags) {
    push @output, sprintf("#define %s_%-${maxtaglen}s %3i",$id,$tags[$_],$vals[$_]);
  }
  push @output, "";
}

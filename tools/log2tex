#!/usr/bin/perl -w

use strict;

my $dir = ".";
my $html = 0;
if (@ARGV && $ARGV[0] eq "-html") {
  shift @ARGV;
  $html = 1;
}

$dir = shift @ARGV if @ARGV;
usage() if @ARGV || $dir =~ /^-/;
chdir($dir);

# -----------------------------------------------------------------------
# ---- Read log file
open LOG, "<log.txt" or die "Cannot read log file\n";
my $olddat;
my $oldtim;
my $exptname;
my %namedfigures;
my @loglines;
my $firstdate;
while (<LOG>) {
  chomp;
  /^$/ and next;
  my $dat = substr($_,0,8);
  my $tim = substr($_,9,8);
  my $msg = substr($_,18);
  
  # $dat = $olddat unless $dat =~ /\d/;
  $firstdate = $dat if !defined($firstdate) && $dat =~/\d/;
  $tim = $oldtim unless $tim =~ /\d/;
  $olddat = $dat;
  $oldtim = $tim;
  
  my %logline;
  $logline{"date"} = $dat;
  $logline{"time"} = $tim;
  $logline{"msg"} = $msg;
  if ($msg =~ /Figure: (.*)/) {
    $namedfigures{$1} = 1;
  } elsif ($msg =~/New experiment: (.*)/) {
    $exptname = $1;
  }
  push @loglines, \%logline;
}
close LOG;

# ------------------------------------------------------------------------
# ---- Interpret first date and match against expt
my $firstmo = substr($firstdate,0,2);
my $firstdy = substr($firstdate,3,2);
my $firstyr = substr($firstdate,6,2);
my $auxname = "";
if (substr($exptname,0,6) eq "$firstyr$firstmo$firstdy") {
  # Experiment name matches date.
} else {
  # Experiment name does not match date
  $auxname = "dd $firstdate";
}

# ----------------------------------------------------------------------
# ---- Read set of figures
my %figsbytrial;
opendir DIR, ".";
my @allfigs = grep { /fig/ && /png/ } readdir(DIR);
closedir DIR;
for (@allfigs) {
  /^(\d+)-fig-(\d+)-(.*)\.png$/ or next;
  $figsbytrial{$1}->{$2} = $_;
}

# ------------------------------------------------------------------------
# ---- Open output
if ($html) {
  open OUT, ">log.html" or die "Cannot write HTML file\n";
} else {
  open OUT, ">log.tex" or die "Cannot write LaTeX file\n";
}

writepreamble();

# ----------------------------------------------------------------------
# ---- Write log
my $firsttrial = undef;
my $lasttrial = undef;
my $firsttime = undef;
my $lasttime = undef;
my $ignorepixval = 0;
my @noteaccum;
my @infoaccum;
my %trialtypes;
for my $line (@loglines) {
  my $dat = $line->{date};
  my $tim = $line->{time};
  my $msg = $line->{msg};

  next if $msg =~ /^V(SD)?Scope (starting|closing)/;
  next if $msg =~ /^Appending to existing log/;
  next if $msg =~ /^New experiment:/;
  next if $msg =~ /^Pixel value/ && $ignorepixval;
  
  if ($dat =~ /\d/) {
    # Let's print a date unless it is the first date
    writeout();
    writedate($dat) unless $dat eq $firstdate;
  }
  if ($msg =~ /^Trial (\d+): (.*)/) {
    writeout("Trial");
    my $tri = $1;
    my $typ = $2;
    if ($typ eq "Snapshot") {
      if (exists $trialtypes{"Snapshot"} || exists $trialtypes{"Snapshots"}) {
	$trialtypes{"Snapshots"}=1;
	delete $trialtypes{"Snapshot"};
      } else {
	$trialtypes{"Snapshot"}=1;
      }
    } else {
      $ignorepixval = 1;
      $trialtypes{$typ} = 1;
    }
    $firsttrial = $tri unless defined $firsttrial;
    $firsttime = $tim unless defined $firsttime;
    $lasttrial = $tri;
    $lasttime = $tim;
    my $havefigs = 0;
    if (exists($figsbytrial{$tri})) {
      for (values %{$figsbytrial{$tri}}) {
	$havefigs = 1 unless exists($namedfigures{$_});
      }
    }
    if ($havefigs) {
      writeout();
      writeautofigures($tri);
    } else {
      writeout() if $html;
    }
  } elsif ($msg =~ /Note: (.*)/) {
    next if $1 eq "";
    writeout("Note");
    push @noteaccum, $1;
  } elsif ($msg =~/Figure: (.*)/) {
    writeout();
    writefigure($1);
  } else {
    writeout("Info");
    push @infoaccum, $msg;
  }
}

writeout();

# ----------------------------------------------------------------------
writetrailer();
close OUT;

# ----------------------------------------------------------------------


# ======================================================================
sub writeout {
  my $except = shift || "";
  writetrials() unless $except =~ /Trial/;
  writenotes() unless $except =~ /Note/;
  writeinfo() unless $except =~ /Info/;
}

sub writetrials {
  return unless defined $firsttrial;
  my $timerep = reptimes($firsttime, $lasttime);
  my $trialrep = reptrials($firsttrial, $lasttrial);
  print OUT "<div class=\"trial\">" if $html;
  print OUT "\\trialface\\rule{0pt}{8pt}" unless $html;
  print OUT "$trialrep $timerep: ";
  my @trialtypes;
  for (sort keys %trialtypes) {
    s/E'phys\. \+ vsd/VSD/;
    s/vsd/VSD/;
    s/e'phys\. stimuli/stimuli/;
    push @trialtypes, $_;
  }
  print OUT join(", ",@trialtypes);
  print OUT "</div>" if $html;
  print OUT "\n\n";
  $firsttrial = undef;
  $firsttime = undef;
  %trialtypes = ();
}

sub writenotes {
  return unless @noteaccum;
  for (@noteaccum) {
    s/$/\./ unless /[:;.,?!]([] })'"])*$/;
    $_ = ucfirst($_);
  }
  print OUT "<div class=\"notes\">" if $html;
  print OUT "\\leftskip=0cm\\noteface\\rule{0pt}{9pt}" unless $html;
  if ($html) {
    for (@noteaccum) {
      #print OUT "<p class=\"note\">", htmlify($_), "\n";
      print OUT htmlify($_), "\n";
    }
  } else {
    print OUT texify(join("\n",@noteaccum));
  }
  print OUT "</div>\n\n" if $html;
  print OUT "\\vspace{1pt}\n\n\\leftskip=0cm" unless $html;
  @noteaccum = ();
}

sub writeinfo {
  return unless @infoaccum;
  for (@infoaccum) {
    s/^Parameter change/Parameter change:/;
    s/$/./ unless /[:;.,?!][]})'"]*\s*$/;
  }
  print OUT "<div class=\"info\">" if $html;
  print OUT "\\leftskip=.5cm\\infoface\\rule{0pt}{6.2pt}" unless $html;
  print OUT htmlify(join("\n",@infoaccum)) if $html;
  print OUT texify(join("\n",@infoaccum)) unless $html;
  print OUT "</div>\n\n" if $html;
  print OUT "\\vspace{-.5pt}\n\n\\leftskip=0cm\n" unless $html;
  @infoaccum = ();
}

sub writeautofigures {
  my $tri = shift;
  for (sort values %{$figsbytrial{$tri}}) {
    next if exists $namedfigures{$_};
    writefigure($_);
  }
}

sub writefigure {
  my $fig = shift;
  my $lbl = $fig;
  $lbl =~ s/(\d+)-fig-(\d+)-(.*).png/\#$1.$2: $3/;
  $lbl =~ s/\#/\\\#/g unless $html;
  if ($html) {
    print OUT "<span class=\"floatimg\">";
    print OUT "<a class=\"imlink\" href=\"\"";
    print OUT " onclick=\"window.open('$fig', '_blank', ";
    print OUT " 'width=516,height=516');\">";
    print OUT "<object width=\"100%\"  data=\"$fig\"></object><br>";
    print OUT "<span class=\"imlabel\">$lbl</span></a></span>\n\n";
  } else {
    print OUT "\\myfig{$fig}{$lbl}\n\n";
  }
}

sub htmlify {
  my $txt = shift;
  $txt =~ s/\&/&amp;/g;
  $txt =~ s/</&lt;/g;
  $txt =~ s/>/&gt;/g;
  $txt =~ s/(_)\{(.*)\}/<span class=\"sub\">$2<\/span>/g;
  $txt =~ s/(\^)\{(.*)\}/<span class=\"sup\">$2<\/span>/g;
  $txt =~ s/(_)(.?\w*)/<span class=\"sub\">$2<\/span>/g;
  $txt =~ s/(\^)(.?\w*)/<span class=\"sup\">$2<\/span>/g;
  return $txt;
}

sub texify {
  my $txt = shift;
  $txt =~ s/\\/\$\\backslash\$/g;
  $txt =~ s/([\$\{\}\&\#\%])/\\$1/g;
  $txt =~ s/([_^])\{(.*)\}/\$\{\}$1\{\\textrm{\\tiny\\sffamily $2}\}\$/g;
  $txt =~ s/([_^])(.?\w*)/\$\{\}$1\{\\textrm{\\tiny\\sffamily $2}\}\$/g;
  return $txt;
}

######################################################################
sub usage {
  print STDERR "Usage: log2tex [-html] expt.dir\n";
}

######################################################################
sub writepreamble {
  if ($html) {
    writehtmlheader();
  } else {
    writelatexheader();
  }
}

sub writelatexheader {
  # -- Packages
  print OUT << 'EOF';
\documentclass[10pt]{article}
\usepackage{helvet}
\usepackage{charter}
\usepackage[letterpaper,width=6.5in,height=9in,right=.35in]{geometry}
\usepackage{fancyhdr}
\usepackage{graphicx}
\usepackage{multicol}
EOF

  print OUT "\\def\\exptname{$exptname}\n";
  print OUT "\\def\\auxname{$auxname}\n";

  # -- Style options
  print OUT << 'EOF';
\pagestyle{fancy}
\def\headrulewidth{0.4pt}
\def\footrulewidth{0.pt}
\lhead{{\bf\exptname} \auxname}
\chead{}
\rhead{\thepage/\pageref{end}}
\lfoot{}
\cfoot{}
\rfoot{}
\headsep=3pt
\footskip=5pt
\def\noteface{\normalfont\normalsize}
\def\infoface{\normalfont\sffamily\scriptsize}
\def\trialface{\normalfont\sffamily\footnotesize}
\def\capface{\normalfont\sffamily\itshape\scriptsize}
\parindent=0.0cm
\def\newdate#1{{\normalfont\normalsize\sffamily\bfseries#1}}
\def\myfig#1#2{\kern2pt\begin{minipage}[t]{.5in}\capface#2\end{minipage}~\begin{minipage}[t]{2.5in}~\vspace{-7pt}\\\includegraphics[width=2.5in]{#1}\end{minipage}\vspace{1pt}}

%\begin{tabular}{p{.5in}r}\capface#2&\includegraphics[width=2.5in]{#1}\\\end{tabular}}

%\mbox{}\kern.25cm\begin{minipage}[b]{.5in}\capface#2\vspace{2.27in}\end{minipage}~\includegraphics[width=2.5in]{#1}}
EOF

# -- Start the document
  print OUT << 'EOF';
\begin{document}
\raggedbottom\raggedright\raggedcolumns
\begin{multicols}{2}
EOF
}


sub writehtmlheader {
  my @bits = split(/\//,$dir);
  my $leaf = pop @bits;
  print OUT << 'EOF';
  <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<style type="text/css">
html {
  background-color: #999999;
}
body {
  text-align: left;
  font-family: "Helvetica", "Sans";
  font-size: 12px;
  background-color: white;
  width: 800px;
  margin-left: auto;
  margin-right: auto;
  margin-top: 20px;
  margin-bottom: 20px;
  padding-left: 50px;
  padding-right: 50px;
  padding-top: 30px;
  padding-bottom: 40px;
}
.back {
  font-size: 12px;
}
.header {
  font-size: 20px;
}
.headline {
  padding-bottom: -2px;
  padding-top: -3px;
  margin-left: -3px;
  margin-top: -5px;
  margin-bottom: -3px;
  width:805px;
}
.topmarg {
padding: 8px;
}
.botmarg {
padding: 8px;
}
.trial {
  margin-top: 2px;
  font-size: 14px;
}
.trialno {
  font-weight: bold;
}
.note {
  padding: 0px;
  margin: 0px;
  margin-top: 5px;
}
.notes {
  font-family: "Charter", "Georgia", "Times", "Serif";
  font-size: 15px;
  width: 650px;
  line-height: 130%;
  padding-top: 2px;
  padding-bottom: 2px;
  color: #000080;
  text-indent: 0px;
}
.info {
  font-size: 13px;
  color: #600000;
  margin-left: 20px;
  padding-top: 1px;
  padding-bottom: 1px;
  width: 550px;
}
.floatimg {
  float: right;
  border: 0px solid gray;
  width: 160px;
  padding: 6px;
  padding-bottom: 2px;
  margin: 5px;
  text-align: center;
  background-color: #cccccc;
}
.imlabel {
}
.imlink:link {
    color: blue; text-decoration: none;
}
.imlink:visited {
    color: blue; text-decoration: none;
}
.imlink:hover {
    color: red; text-decoration: none;
}
.exptlink:link {
  color: black; text-decoration: none;
}
.exptlink:visited {
  color: black; text-decoration: none;
}
.exptlink:hover {
  color: red; text-decoration: none;
}
.newdate {
  color: #007700;
  font-size: 13px;
  margin-top: 10px;
margin-left: -13px;
}
.triangle {
 vertical-align: 15%;
}
</style>
<title>Log for expt.
EOF
  print OUT "$leaf\n";
  print OUT <<'EOF';
</title>
</head>

<body>
EOF
  writehtmlheadline();
  print OUT "<hr><div class=\"topmarg\"></div>\n";
}

sub writehtmlheadline {
  my @bits = split(/\//,$dir);
  my $leaf = pop @bits;
print OUT <<'EOF';
<table width="100%" class="headline">
<tr>
  <td>
    <span class="header">Log for expt.
EOF

  print OUT "<a class=\"exptlink\" href=\"file://$dir/\">";
  print OUT "$leaf</a>";
  print OUT <<'EOF';
    </span>
  </td>
  <td  align="right">
    <span class="back">
EOF
  print OUT "<a class=\"exptlink\" href=\"../index.html#$leaf\">";
  print OUT <<'EOF';
[index]</a>
    </span>
  </td>
</tr></table>

EOF
}

sub writetrailer {
  if ($html) {
    print OUT "<div class=\"botmarg\"></div>\n<hr>\n";
    writehtmlheadline();
    print OUT <<'EOF';
</body>
</html>
EOF
  } else {
    print OUT <<'EOF';
\label{end}
\end{multicols}
\end{document}
EOF
  }
}

######################################################################
sub writedate {
  my $dat = shift;
  if ($html) {
    print OUT "\n<div class=\"newdate\"><span class=\"triangle\">&#9654;</span> $dat</div>\n\n";
  } else {
    print OUT "\n\\newdate{$dat}\n\n"
  }
}

sub reptimes {
  my $ft = shift;
  my $lt = shift;
  unless ($ft eq $lt) {
    $ft .= "&ndash;" if $html;
    $ft .= "--" unless $html;
    $ft .= $lt;
  }
  return "<span class=\"time\">($ft)</span>" if $html;
  return "($ft)";
}

sub reptrials {
  my $ft = shift;
  my $lt = shift;
  $ft = "#$ft" if $html;
  $lt = "#$lt" if $html;
  $ft = "\\#$ft" unless $html;
  $lt = "\\#$lt" unless $html;
  unless ($ft eq $lt) {
    $ft .= "&ndash;" if $html;
    $ft .= "--" unless $html;
    $ft .= $lt;
  }
  return "<span class=\"trialno\">$ft</span>" if $html;
  return "{\\bf $ft}";
}

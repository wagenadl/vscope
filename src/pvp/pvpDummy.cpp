// pvpDummy.cpp - Dummy implementation of pvcam library.
// Generated by pvcam2dummy.pl. Do not edit.

#include <pvp/dwpvcam.h>
#include <stdio.h>

rs_bool PV_DECL pl_pvcam_get_ver(uns16*) {
  return false;
}

rs_bool PV_DECL pl_pvcam_init(void) {
    printf("Dummy pvcam_init\n");
  return false;
}

rs_bool PV_DECL pl_pvcam_uninit(void) {
  return false;
}

rs_bool PV_DECL pl_cam_close(int16) {
  return false;
}

rs_bool PV_DECL pl_cam_get_name(int16, char*) {
  return false;
}

rs_bool PV_DECL pl_cam_get_total(int16*) {
  return false;
}

rs_bool PV_DECL pl_cam_open(char*, int16*, int16) {
  return false;
}

rs_bool PV_DECL pl_cam_register_callback(int16, int32, void*) {
  return false;
}

rs_bool PV_DECL pl_cam_register_callback_ex(int16, int32, void*, void*) {
  return false;
}

rs_bool PV_DECL pl_cam_register_callback_ex2(int16, int32, void*) {
  return false;
}

rs_bool PV_DECL pl_cam_register_callback_ex3(int16, int32, void*, void*) {
  return false;
}

rs_bool PV_DECL pl_cam_deregister_callback(int16, int32) {
  return false;
}

int16 PV_DECL pl_error_code(void) {
  return false;
}

rs_bool PV_DECL pl_error_message(int16, char*) {
  return false;
}

rs_bool PV_DECL pl_get_param(int16, uns32, int16, void*) {
  return false;
}

rs_bool PV_DECL pl_set_param(int16, uns32, void*) {
  return false;
}

rs_bool PV_DECL pl_get_enum_param(int16, uns32, uns32, int32*, char*, uns32) {
  return false;
}

rs_bool PV_DECL pl_enum_str_length(int16, uns32, uns32, uns32*) {
  return false;
}

rs_bool PV_DECL pl_pp_reset(int16) {
  return false;
}

rs_bool PV_DECL pl_create_smart_stream_struct(smart_stream_type**, uns16) {
  return false;
}

rs_bool PV_DECL pl_release_smart_stream_struct(smart_stream_type**) {
  return false;
}

rs_bool PV_DECL pl_create_frame_info_struct(FRAME_INFO**) {
  return false;
}

rs_bool PV_DECL pl_release_frame_info_struct(FRAME_INFO*) {
  return false;
}

rs_bool PV_DECL pl_exp_setup_seq(int16, uns16, uns16, const rgn_type*, int16, uns32, uns32*) {
  return false;
}

rs_bool PV_DECL pl_exp_start_seq(int16, void*) {
  return false;
}

rs_bool PV_DECL pl_exp_setup_cont(int16, uns16, const rgn_type*, int16, uns32, uns32*, int16) {
  return false;
}

rs_bool PV_DECL pl_exp_start_cont(int16, void*, uns32) {
  return false;
}

rs_bool PV_DECL pl_exp_check_status(int16, int16*, uns32*) {
  return false;
}

rs_bool PV_DECL pl_exp_check_cont_status(int16, int16*, uns32*, uns32*) {
  return false;
}

rs_bool PV_DECL pl_exp_check_cont_status_ex(int16, int16*, uns32*, uns32*, FRAME_INFO*) {
  return false;
}

rs_bool PV_DECL pl_exp_get_latest_frame(int16, void**) {
  return false;
}

rs_bool PV_DECL pl_exp_get_latest_frame_ex(int16, void**, FRAME_INFO*) {
  return false;
}

rs_bool PV_DECL pl_exp_get_oldest_frame(int16, void**) {
  return false;
}

rs_bool PV_DECL pl_exp_get_oldest_frame_ex(int16, void**, FRAME_INFO*) {
  return false;
}

rs_bool PV_DECL pl_exp_unlock_oldest_frame(int16) {
  return false;
}

rs_bool PV_DECL pl_exp_stop_cont(int16, int16) {
  return false;
}

rs_bool PV_DECL pl_exp_abort(int16, int16) {
  return false;
}

rs_bool PV_DECL pl_exp_finish_seq(int16, void*, int16) {
  return false;
}

rs_bool PV_DECL pl_io_script_control(int16, uns16, flt64, uns32) {
  return false;
}

rs_bool PV_DECL pl_io_clear_script_control(int16) {
  return false;
}

rs_bool PV_DECL pl_md_frame_decode(md_frame*, void*, uns32) {
  return false;
}

rs_bool PV_DECL pl_md_frame_recompose(void*, uns16, uns16, uns16, uns16, md_frame*) {
  return false;
}

rs_bool PV_DECL pl_md_create_frame_struct_cont(md_frame**, uns16) {
  return false;
}

rs_bool PV_DECL pl_md_create_frame_struct(md_frame**, void*, uns32) {
  return false;
}

rs_bool PV_DECL pl_md_release_frame_struct(md_frame*) {
  return false;
}

rs_bool PV_DECL pl_md_read_extended(md_ext_item_collection*, void*, uns32) {
  return false;
}


// pvp_Class3.h - generated by pvcam2param.pl. Do not Edit.

  bool availExpTime() throw(pvpException);
  pvpAccess accessExpTime() throw(pvpException);
  unsigned short getExpTime() throw(pvpException);
  unsigned short minExpTime() throw(pvpException);
  unsigned short maxExpTime() throw(pvpException);
  unsigned short defaultExpTime() throw(pvpException);
  unsigned short stepExpTime() throw(pvpException);
  int countExpTime() throw(pvpException);
  void setExpTime(unsigned short) throw(pvpException);
  void reportExpTime() throw(pvpException);

  class ExpRes {
  public:
    enum V {
      Millisec,
      Microsec,
      Sec,
    };
    ExpRes(ExpRes::V x): x(x) {}
    ExpRes(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availExpRes() throw(pvpException);
  pvpAccess accessExpRes() throw(pvpException);
  pvpCamera::ExpRes getExpRes() throw(pvpException);
  pvpCamera::ExpRes minExpRes() throw(pvpException);
  pvpCamera::ExpRes maxExpRes() throw(pvpException);
  pvpCamera::ExpRes defaultExpRes() throw(pvpException);
  pvpCamera::ExpRes stepExpRes() throw(pvpException);
  int countExpRes() throw(pvpException);
  void setExpRes(pvpCamera::ExpRes) throw(pvpException);
  void reportExpRes() throw(pvpException);

  bool availExpMinTime() throw(pvpException);
  pvpAccess accessExpMinTime() throw(pvpException);
  float getExpMinTime() throw(pvpException);
  float minExpMinTime() throw(pvpException);
  float maxExpMinTime() throw(pvpException);
  float defaultExpMinTime() throw(pvpException);
  float stepExpMinTime() throw(pvpException);
  int countExpMinTime() throw(pvpException);
  void setExpMinTime(float) throw(pvpException);
  void reportExpMinTime() throw(pvpException);

  bool availExpResIndex() throw(pvpException);
  pvpAccess accessExpResIndex() throw(pvpException);
  unsigned short getExpResIndex() throw(pvpException);
  unsigned short minExpResIndex() throw(pvpException);
  unsigned short maxExpResIndex() throw(pvpException);
  unsigned short defaultExpResIndex() throw(pvpException);
  unsigned short stepExpResIndex() throw(pvpException);
  int countExpResIndex() throw(pvpException);
  void setExpResIndex(unsigned short) throw(pvpException);
  void reportExpResIndex() throw(pvpException);

  class BofEofEnable {
  public:
    enum V {
      NoFrameIrqs,
      BeginFrameIrqs,
      EndFrameIrqs,
      BeginEndFrameIrqs,
    };
    BofEofEnable(BofEofEnable::V x): x(x) {}
    BofEofEnable(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availBofEofEnable() throw(pvpException);
  pvpAccess accessBofEofEnable() throw(pvpException);
  pvpCamera::BofEofEnable getBofEofEnable() throw(pvpException);
  pvpCamera::BofEofEnable minBofEofEnable() throw(pvpException);
  pvpCamera::BofEofEnable maxBofEofEnable() throw(pvpException);
  pvpCamera::BofEofEnable defaultBofEofEnable() throw(pvpException);
  pvpCamera::BofEofEnable stepBofEofEnable() throw(pvpException);
  int countBofEofEnable() throw(pvpException);
  void setBofEofEnable(pvpCamera::BofEofEnable) throw(pvpException);
  void reportBofEofEnable() throw(pvpException);

  bool availBofEofCount() throw(pvpException);
  pvpAccess accessBofEofCount() throw(pvpException);
  unsigned long getBofEofCount() throw(pvpException);
  unsigned long minBofEofCount() throw(pvpException);
  unsigned long maxBofEofCount() throw(pvpException);
  unsigned long defaultBofEofCount() throw(pvpException);
  unsigned long stepBofEofCount() throw(pvpException);
  int countBofEofCount() throw(pvpException);
  void setBofEofCount(unsigned long) throw(pvpException);
  void reportBofEofCount() throw(pvpException);

  bool availBofEofClr() throw(pvpException);
  pvpAccess accessBofEofClr() throw(pvpException);
  bool getBofEofClr() throw(pvpException);
  bool minBofEofClr() throw(pvpException);
  bool maxBofEofClr() throw(pvpException);
  bool defaultBofEofClr() throw(pvpException);
  bool stepBofEofClr() throw(pvpException);
  int countBofEofClr() throw(pvpException);
  void setBofEofClr(bool) throw(pvpException);
  void reportBofEofClr() throw(pvpException);

  bool availCircBuffer() throw(pvpException);
  pvpAccess accessCircBuffer() throw(pvpException);
  bool getCircBuffer() throw(pvpException);
  bool minCircBuffer() throw(pvpException);
  bool maxCircBuffer() throw(pvpException);
  bool defaultCircBuffer() throw(pvpException);
  bool stepCircBuffer() throw(pvpException);
  int countCircBuffer() throw(pvpException);
  void setCircBuffer(bool) throw(pvpException);
  void reportCircBuffer() throw(pvpException);

  bool availHwAutostop() throw(pvpException);
  pvpAccess accessHwAutostop() throw(pvpException);
  short getHwAutostop() throw(pvpException);
  short minHwAutostop() throw(pvpException);
  short maxHwAutostop() throw(pvpException);
  short defaultHwAutostop() throw(pvpException);
  short stepHwAutostop() throw(pvpException);
  int countHwAutostop() throw(pvpException);
  void setHwAutostop(short) throw(pvpException);
  void reportHwAutostop() throw(pvpException);

  void reportClass3() throw(pvpException);

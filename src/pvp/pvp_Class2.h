// pvp_Class2.h - generated by pvcam2param.pl. Do not Edit.

  bool availMinBlock() throw(pvpException);
  pvpAccess accessMinBlock() throw(pvpException);
  short getMinBlock() throw(pvpException);
  short minMinBlock() throw(pvpException);
  short maxMinBlock() throw(pvpException);
  short defaultMinBlock() throw(pvpException);
  short stepMinBlock() throw(pvpException);
  int countMinBlock() throw(pvpException);
  void setMinBlock(short) throw(pvpException);
  void reportMinBlock() throw(pvpException);

  bool availNumMinBlock() throw(pvpException);
  pvpAccess accessNumMinBlock() throw(pvpException);
  short getNumMinBlock() throw(pvpException);
  short minNumMinBlock() throw(pvpException);
  short maxNumMinBlock() throw(pvpException);
  short defaultNumMinBlock() throw(pvpException);
  short stepNumMinBlock() throw(pvpException);
  int countNumMinBlock() throw(pvpException);
  void setNumMinBlock(short) throw(pvpException);
  void reportNumMinBlock() throw(pvpException);

  bool availSkipAtOnceBlk() throw(pvpException);
  pvpAccess accessSkipAtOnceBlk() throw(pvpException);
  long getSkipAtOnceBlk() throw(pvpException);
  long minSkipAtOnceBlk() throw(pvpException);
  long maxSkipAtOnceBlk() throw(pvpException);
  long defaultSkipAtOnceBlk() throw(pvpException);
  long stepSkipAtOnceBlk() throw(pvpException);
  int countSkipAtOnceBlk() throw(pvpException);
  void setSkipAtOnceBlk(long) throw(pvpException);
  void reportSkipAtOnceBlk() throw(pvpException);

  bool availNumOfStripsPerClr() throw(pvpException);
  pvpAccess accessNumOfStripsPerClr() throw(pvpException);
  short getNumOfStripsPerClr() throw(pvpException);
  short minNumOfStripsPerClr() throw(pvpException);
  short maxNumOfStripsPerClr() throw(pvpException);
  short defaultNumOfStripsPerClr() throw(pvpException);
  short stepNumOfStripsPerClr() throw(pvpException);
  int countNumOfStripsPerClr() throw(pvpException);
  void setNumOfStripsPerClr(short) throw(pvpException);
  void reportNumOfStripsPerClr() throw(pvpException);

  bool availContClears() throw(pvpException);
  pvpAccess accessContClears() throw(pvpException);
  bool getContClears() throw(pvpException);
  bool minContClears() throw(pvpException);
  bool maxContClears() throw(pvpException);
  bool defaultContClears() throw(pvpException);
  bool stepContClears() throw(pvpException);
  int countContClears() throw(pvpException);
  void setContClears(bool) throw(pvpException);
  void reportContClears() throw(pvpException);

  class AntiBlooming {
  public:
    enum V {
      Notused,
      Inactive,
      Active,
    };
    AntiBlooming(AntiBlooming::V x): x(x) {}
    AntiBlooming(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availAntiBlooming() throw(pvpException);
  pvpAccess accessAntiBlooming() throw(pvpException);
  pvpCamera::AntiBlooming getAntiBlooming() throw(pvpException);
  pvpCamera::AntiBlooming minAntiBlooming() throw(pvpException);
  pvpCamera::AntiBlooming maxAntiBlooming() throw(pvpException);
  pvpCamera::AntiBlooming defaultAntiBlooming() throw(pvpException);
  pvpCamera::AntiBlooming stepAntiBlooming() throw(pvpException);
  int countAntiBlooming() throw(pvpException);
  void setAntiBlooming(pvpCamera::AntiBlooming) throw(pvpException);
  void reportAntiBlooming() throw(pvpException);

  class LogicOutput {
  public:
    enum V {
      NotScan,
      Shutter,
      NotRdy,
      Logic0,
      Clearing,
      NotFtImageShift,
      Reserved,
      Logic1,
    };
    LogicOutput(LogicOutput::V x): x(x) {}
    LogicOutput(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availLogicOutput() throw(pvpException);
  pvpAccess accessLogicOutput() throw(pvpException);
  pvpCamera::LogicOutput getLogicOutput() throw(pvpException);
  pvpCamera::LogicOutput minLogicOutput() throw(pvpException);
  pvpCamera::LogicOutput maxLogicOutput() throw(pvpException);
  pvpCamera::LogicOutput defaultLogicOutput() throw(pvpException);
  pvpCamera::LogicOutput stepLogicOutput() throw(pvpException);
  int countLogicOutput() throw(pvpException);
  void setLogicOutput(pvpCamera::LogicOutput) throw(pvpException);
  void reportLogicOutput() throw(pvpException);

  class EdgeTrigger {
  public:
    enum V {
      Pos = 2,
      Neg,
    };
    EdgeTrigger(EdgeTrigger::V x): x(x) {}
    EdgeTrigger(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availEdgeTrigger() throw(pvpException);
  pvpAccess accessEdgeTrigger() throw(pvpException);
  pvpCamera::EdgeTrigger getEdgeTrigger() throw(pvpException);
  pvpCamera::EdgeTrigger minEdgeTrigger() throw(pvpException);
  pvpCamera::EdgeTrigger maxEdgeTrigger() throw(pvpException);
  pvpCamera::EdgeTrigger defaultEdgeTrigger() throw(pvpException);
  pvpCamera::EdgeTrigger stepEdgeTrigger() throw(pvpException);
  int countEdgeTrigger() throw(pvpException);
  void setEdgeTrigger(pvpCamera::EdgeTrigger) throw(pvpException);
  void reportEdgeTrigger() throw(pvpException);

  bool availIntensifierGain() throw(pvpException);
  pvpAccess accessIntensifierGain() throw(pvpException);
  short getIntensifierGain() throw(pvpException);
  short minIntensifierGain() throw(pvpException);
  short maxIntensifierGain() throw(pvpException);
  short defaultIntensifierGain() throw(pvpException);
  short stepIntensifierGain() throw(pvpException);
  int countIntensifierGain() throw(pvpException);
  void setIntensifierGain(short) throw(pvpException);
  void reportIntensifierGain() throw(pvpException);

  class ShtrGateMode {
  public:
    enum V {
      Safe,
      Gating,
      Shutter,
    };
    ShtrGateMode(ShtrGateMode::V x): x(x) {}
    ShtrGateMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availShtrGateMode() throw(pvpException);
  pvpAccess accessShtrGateMode() throw(pvpException);
  pvpCamera::ShtrGateMode getShtrGateMode() throw(pvpException);
  pvpCamera::ShtrGateMode minShtrGateMode() throw(pvpException);
  pvpCamera::ShtrGateMode maxShtrGateMode() throw(pvpException);
  pvpCamera::ShtrGateMode defaultShtrGateMode() throw(pvpException);
  pvpCamera::ShtrGateMode stepShtrGateMode() throw(pvpException);
  int countShtrGateMode() throw(pvpException);
  void setShtrGateMode(pvpCamera::ShtrGateMode) throw(pvpException);
  void reportShtrGateMode() throw(pvpException);

  bool availAdcOffset() throw(pvpException);
  pvpAccess accessAdcOffset() throw(pvpException);
  short getAdcOffset() throw(pvpException);
  short minAdcOffset() throw(pvpException);
  short maxAdcOffset() throw(pvpException);
  short defaultAdcOffset() throw(pvpException);
  short stepAdcOffset() throw(pvpException);
  int countAdcOffset() throw(pvpException);
  void setAdcOffset(short) throw(pvpException);
  void reportAdcOffset() throw(pvpException);

  bool availChipName() throw(pvpException);
  pvpAccess accessChipName() throw(pvpException);
  QString getChipName() throw(pvpException);
  QString minChipName() throw(pvpException);
  QString maxChipName() throw(pvpException);
  QString defaultChipName() throw(pvpException);
  QString stepChipName() throw(pvpException);
  int countChipName() throw(pvpException);
  void setChipName(QString) throw(pvpException);
  void reportChipName() throw(pvpException);

  class CoolingMode {
  public:
    enum V {
      NormalCool,
      CryoCool,
    };
    CoolingMode(CoolingMode::V x): x(x) {}
    CoolingMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availCoolingMode() throw(pvpException);
  pvpAccess accessCoolingMode() throw(pvpException);
  pvpCamera::CoolingMode getCoolingMode() throw(pvpException);
  pvpCamera::CoolingMode minCoolingMode() throw(pvpException);
  pvpCamera::CoolingMode maxCoolingMode() throw(pvpException);
  pvpCamera::CoolingMode defaultCoolingMode() throw(pvpException);
  pvpCamera::CoolingMode stepCoolingMode() throw(pvpException);
  int countCoolingMode() throw(pvpException);
  void setCoolingMode(pvpCamera::CoolingMode) throw(pvpException);
  void reportCoolingMode() throw(pvpException);

  bool availPreampDelay() throw(pvpException);
  pvpAccess accessPreampDelay() throw(pvpException);
  unsigned short getPreampDelay() throw(pvpException);
  unsigned short minPreampDelay() throw(pvpException);
  unsigned short maxPreampDelay() throw(pvpException);
  unsigned short defaultPreampDelay() throw(pvpException);
  unsigned short stepPreampDelay() throw(pvpException);
  int countPreampDelay() throw(pvpException);
  void setPreampDelay(unsigned short) throw(pvpException);
  void reportPreampDelay() throw(pvpException);

  bool availPreflash() throw(pvpException);
  pvpAccess accessPreflash() throw(pvpException);
  unsigned short getPreflash() throw(pvpException);
  unsigned short minPreflash() throw(pvpException);
  unsigned short maxPreflash() throw(pvpException);
  unsigned short defaultPreflash() throw(pvpException);
  unsigned short stepPreflash() throw(pvpException);
  int countPreflash() throw(pvpException);
  void setPreflash(unsigned short) throw(pvpException);
  void reportPreflash() throw(pvpException);

  class ColorMode {
  public:
    enum V {
      None,
      Rggb = 2,
    };
    ColorMode(ColorMode::V x): x(x) {}
    ColorMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availColorMode() throw(pvpException);
  pvpAccess accessColorMode() throw(pvpException);
  pvpCamera::ColorMode getColorMode() throw(pvpException);
  pvpCamera::ColorMode minColorMode() throw(pvpException);
  pvpCamera::ColorMode maxColorMode() throw(pvpException);
  pvpCamera::ColorMode defaultColorMode() throw(pvpException);
  pvpCamera::ColorMode stepColorMode() throw(pvpException);
  int countColorMode() throw(pvpException);
  void setColorMode(pvpCamera::ColorMode) throw(pvpException);
  void reportColorMode() throw(pvpException);

  class MppCapable {
  public:
    enum V {
      Unknown,
      AlwaysOff,
      AlwaysOn,
      Selectable,
    };
    MppCapable(MppCapable::V x): x(x) {}
    MppCapable(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availMppCapable() throw(pvpException);
  pvpAccess accessMppCapable() throw(pvpException);
  pvpCamera::MppCapable getMppCapable() throw(pvpException);
  pvpCamera::MppCapable minMppCapable() throw(pvpException);
  pvpCamera::MppCapable maxMppCapable() throw(pvpException);
  pvpCamera::MppCapable defaultMppCapable() throw(pvpException);
  pvpCamera::MppCapable stepMppCapable() throw(pvpException);
  int countMppCapable() throw(pvpException);
  void setMppCapable(pvpCamera::MppCapable) throw(pvpException);
  void reportMppCapable() throw(pvpException);

  bool availPreampOffControl() throw(pvpException);
  pvpAccess accessPreampOffControl() throw(pvpException);
  unsigned long getPreampOffControl() throw(pvpException);
  unsigned long minPreampOffControl() throw(pvpException);
  unsigned long maxPreampOffControl() throw(pvpException);
  unsigned long defaultPreampOffControl() throw(pvpException);
  unsigned long stepPreampOffControl() throw(pvpException);
  int countPreampOffControl() throw(pvpException);
  void setPreampOffControl(unsigned long) throw(pvpException);
  void reportPreampOffControl() throw(pvpException);

  bool availSerialNum() throw(pvpException);
  pvpAccess accessSerialNum() throw(pvpException);
  unsigned short getSerialNum() throw(pvpException);
  unsigned short minSerialNum() throw(pvpException);
  unsigned short maxSerialNum() throw(pvpException);
  unsigned short defaultSerialNum() throw(pvpException);
  unsigned short stepSerialNum() throw(pvpException);
  int countSerialNum() throw(pvpException);
  void setSerialNum(unsigned short) throw(pvpException);
  void reportSerialNum() throw(pvpException);

  bool availPremask() throw(pvpException);
  pvpAccess accessPremask() throw(pvpException);
  unsigned short getPremask() throw(pvpException);
  unsigned short minPremask() throw(pvpException);
  unsigned short maxPremask() throw(pvpException);
  unsigned short defaultPremask() throw(pvpException);
  unsigned short stepPremask() throw(pvpException);
  int countPremask() throw(pvpException);
  void setPremask(unsigned short) throw(pvpException);
  void reportPremask() throw(pvpException);

  bool availPrescan() throw(pvpException);
  pvpAccess accessPrescan() throw(pvpException);
  unsigned short getPrescan() throw(pvpException);
  unsigned short minPrescan() throw(pvpException);
  unsigned short maxPrescan() throw(pvpException);
  unsigned short defaultPrescan() throw(pvpException);
  unsigned short stepPrescan() throw(pvpException);
  int countPrescan() throw(pvpException);
  void setPrescan(unsigned short) throw(pvpException);
  void reportPrescan() throw(pvpException);

  bool availPostmask() throw(pvpException);
  pvpAccess accessPostmask() throw(pvpException);
  unsigned short getPostmask() throw(pvpException);
  unsigned short minPostmask() throw(pvpException);
  unsigned short maxPostmask() throw(pvpException);
  unsigned short defaultPostmask() throw(pvpException);
  unsigned short stepPostmask() throw(pvpException);
  int countPostmask() throw(pvpException);
  void setPostmask(unsigned short) throw(pvpException);
  void reportPostmask() throw(pvpException);

  bool availPostscan() throw(pvpException);
  pvpAccess accessPostscan() throw(pvpException);
  unsigned short getPostscan() throw(pvpException);
  unsigned short minPostscan() throw(pvpException);
  unsigned short maxPostscan() throw(pvpException);
  unsigned short defaultPostscan() throw(pvpException);
  unsigned short stepPostscan() throw(pvpException);
  int countPostscan() throw(pvpException);
  void setPostscan(unsigned short) throw(pvpException);
  void reportPostscan() throw(pvpException);

  bool availPixParDist() throw(pvpException);
  pvpAccess accessPixParDist() throw(pvpException);
  unsigned short getPixParDist() throw(pvpException);
  unsigned short minPixParDist() throw(pvpException);
  unsigned short maxPixParDist() throw(pvpException);
  unsigned short defaultPixParDist() throw(pvpException);
  unsigned short stepPixParDist() throw(pvpException);
  int countPixParDist() throw(pvpException);
  void setPixParDist(unsigned short) throw(pvpException);
  void reportPixParDist() throw(pvpException);

  bool availPixParSize() throw(pvpException);
  pvpAccess accessPixParSize() throw(pvpException);
  unsigned short getPixParSize() throw(pvpException);
  unsigned short minPixParSize() throw(pvpException);
  unsigned short maxPixParSize() throw(pvpException);
  unsigned short defaultPixParSize() throw(pvpException);
  unsigned short stepPixParSize() throw(pvpException);
  int countPixParSize() throw(pvpException);
  void setPixParSize(unsigned short) throw(pvpException);
  void reportPixParSize() throw(pvpException);

  bool availPixSerDist() throw(pvpException);
  pvpAccess accessPixSerDist() throw(pvpException);
  unsigned short getPixSerDist() throw(pvpException);
  unsigned short minPixSerDist() throw(pvpException);
  unsigned short maxPixSerDist() throw(pvpException);
  unsigned short defaultPixSerDist() throw(pvpException);
  unsigned short stepPixSerDist() throw(pvpException);
  int countPixSerDist() throw(pvpException);
  void setPixSerDist(unsigned short) throw(pvpException);
  void reportPixSerDist() throw(pvpException);

  bool availPixSerSize() throw(pvpException);
  pvpAccess accessPixSerSize() throw(pvpException);
  unsigned short getPixSerSize() throw(pvpException);
  unsigned short minPixSerSize() throw(pvpException);
  unsigned short maxPixSerSize() throw(pvpException);
  unsigned short defaultPixSerSize() throw(pvpException);
  unsigned short stepPixSerSize() throw(pvpException);
  int countPixSerSize() throw(pvpException);
  void setPixSerSize(unsigned short) throw(pvpException);
  void reportPixSerSize() throw(pvpException);

  bool availSummingWell() throw(pvpException);
  pvpAccess accessSummingWell() throw(pvpException);
  bool getSummingWell() throw(pvpException);
  bool minSummingWell() throw(pvpException);
  bool maxSummingWell() throw(pvpException);
  bool defaultSummingWell() throw(pvpException);
  bool stepSummingWell() throw(pvpException);
  int countSummingWell() throw(pvpException);
  void setSummingWell(bool) throw(pvpException);
  void reportSummingWell() throw(pvpException);

  bool availFwellCapacity() throw(pvpException);
  pvpAccess accessFwellCapacity() throw(pvpException);
  unsigned long getFwellCapacity() throw(pvpException);
  unsigned long minFwellCapacity() throw(pvpException);
  unsigned long maxFwellCapacity() throw(pvpException);
  unsigned long defaultFwellCapacity() throw(pvpException);
  unsigned long stepFwellCapacity() throw(pvpException);
  int countFwellCapacity() throw(pvpException);
  void setFwellCapacity(unsigned long) throw(pvpException);
  void reportFwellCapacity() throw(pvpException);

  bool availParSize() throw(pvpException);
  pvpAccess accessParSize() throw(pvpException);
  unsigned short getParSize() throw(pvpException);
  unsigned short minParSize() throw(pvpException);
  unsigned short maxParSize() throw(pvpException);
  unsigned short defaultParSize() throw(pvpException);
  unsigned short stepParSize() throw(pvpException);
  int countParSize() throw(pvpException);
  void setParSize(unsigned short) throw(pvpException);
  void reportParSize() throw(pvpException);

  bool availSerSize() throw(pvpException);
  pvpAccess accessSerSize() throw(pvpException);
  unsigned short getSerSize() throw(pvpException);
  unsigned short minSerSize() throw(pvpException);
  unsigned short maxSerSize() throw(pvpException);
  unsigned short defaultSerSize() throw(pvpException);
  unsigned short stepSerSize() throw(pvpException);
  int countSerSize() throw(pvpException);
  void setSerSize(unsigned short) throw(pvpException);
  void reportSerSize() throw(pvpException);

  bool availAccumCapable() throw(pvpException);
  pvpAccess accessAccumCapable() throw(pvpException);
  bool getAccumCapable() throw(pvpException);
  bool minAccumCapable() throw(pvpException);
  bool maxAccumCapable() throw(pvpException);
  bool defaultAccumCapable() throw(pvpException);
  bool stepAccumCapable() throw(pvpException);
  int countAccumCapable() throw(pvpException);
  void setAccumCapable(bool) throw(pvpException);
  void reportAccumCapable() throw(pvpException);

  bool availFlashDwnldCapable() throw(pvpException);
  pvpAccess accessFlashDwnldCapable() throw(pvpException);
  bool getFlashDwnldCapable() throw(pvpException);
  bool minFlashDwnldCapable() throw(pvpException);
  bool maxFlashDwnldCapable() throw(pvpException);
  bool defaultFlashDwnldCapable() throw(pvpException);
  bool stepFlashDwnldCapable() throw(pvpException);
  int countFlashDwnldCapable() throw(pvpException);
  void setFlashDwnldCapable(bool) throw(pvpException);
  void reportFlashDwnldCapable() throw(pvpException);

  bool availControllerAlive() throw(pvpException);
  pvpAccess accessControllerAlive() throw(pvpException);
  bool getControllerAlive() throw(pvpException);
  bool minControllerAlive() throw(pvpException);
  bool maxControllerAlive() throw(pvpException);
  bool defaultControllerAlive() throw(pvpException);
  bool stepControllerAlive() throw(pvpException);
  int countControllerAlive() throw(pvpException);
  void setControllerAlive(bool) throw(pvpException);
  void reportControllerAlive() throw(pvpException);

  bool availReadoutTime() throw(pvpException);
  pvpAccess accessReadoutTime() throw(pvpException);
  float getReadoutTime() throw(pvpException);
  float minReadoutTime() throw(pvpException);
  float maxReadoutTime() throw(pvpException);
  float defaultReadoutTime() throw(pvpException);
  float stepReadoutTime() throw(pvpException);
  int countReadoutTime() throw(pvpException);
  void setReadoutTime(float) throw(pvpException);
  void reportReadoutTime() throw(pvpException);

  bool availClearCycles() throw(pvpException);
  pvpAccess accessClearCycles() throw(pvpException);
  unsigned short getClearCycles() throw(pvpException);
  unsigned short minClearCycles() throw(pvpException);
  unsigned short maxClearCycles() throw(pvpException);
  unsigned short defaultClearCycles() throw(pvpException);
  unsigned short stepClearCycles() throw(pvpException);
  int countClearCycles() throw(pvpException);
  void setClearCycles(unsigned short) throw(pvpException);
  void reportClearCycles() throw(pvpException);

  class ClearMode {
  public:
    enum V {
      Never,
      PreExposure,
      PreSequence,
      PostSequence,
      PrePostSequence,
      PreExposurePostSeq,
    };
    ClearMode(ClearMode::V x): x(x) {}
    ClearMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availClearMode() throw(pvpException);
  pvpAccess accessClearMode() throw(pvpException);
  pvpCamera::ClearMode getClearMode() throw(pvpException);
  pvpCamera::ClearMode minClearMode() throw(pvpException);
  pvpCamera::ClearMode maxClearMode() throw(pvpException);
  pvpCamera::ClearMode defaultClearMode() throw(pvpException);
  pvpCamera::ClearMode stepClearMode() throw(pvpException);
  int countClearMode() throw(pvpException);
  void setClearMode(pvpCamera::ClearMode) throw(pvpException);
  void reportClearMode() throw(pvpException);

  bool availFrameCapable() throw(pvpException);
  pvpAccess accessFrameCapable() throw(pvpException);
  bool getFrameCapable() throw(pvpException);
  bool minFrameCapable() throw(pvpException);
  bool maxFrameCapable() throw(pvpException);
  bool defaultFrameCapable() throw(pvpException);
  bool stepFrameCapable() throw(pvpException);
  int countFrameCapable() throw(pvpException);
  void setFrameCapable(bool) throw(pvpException);
  void reportFrameCapable() throw(pvpException);

  class Pmode {
  public:
    enum V {
      Normal,
      Ft,
      Mpp,
      FtMpp,
      AltNormal,
      AltFt,
      AltMpp,
      AltFtMpp,
      Interline,
    };
    Pmode(Pmode::V x): x(x) {}
    Pmode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availPmode() throw(pvpException);
  pvpAccess accessPmode() throw(pvpException);
  pvpCamera::Pmode getPmode() throw(pvpException);
  pvpCamera::Pmode minPmode() throw(pvpException);
  pvpCamera::Pmode maxPmode() throw(pvpException);
  pvpCamera::Pmode defaultPmode() throw(pvpException);
  pvpCamera::Pmode stepPmode() throw(pvpException);
  int countPmode() throw(pvpException);
  void setPmode(pvpCamera::Pmode) throw(pvpException);
  void reportPmode() throw(pvpException);

  bool availCcsStatus() throw(pvpException);
  pvpAccess accessCcsStatus() throw(pvpException);
  short getCcsStatus() throw(pvpException);
  short minCcsStatus() throw(pvpException);
  short maxCcsStatus() throw(pvpException);
  short defaultCcsStatus() throw(pvpException);
  short stepCcsStatus() throw(pvpException);
  int countCcsStatus() throw(pvpException);
  void setCcsStatus(short) throw(pvpException);
  void reportCcsStatus() throw(pvpException);

  bool availTemp() throw(pvpException);
  pvpAccess accessTemp() throw(pvpException);
  short getTemp() throw(pvpException);
  short minTemp() throw(pvpException);
  short maxTemp() throw(pvpException);
  short defaultTemp() throw(pvpException);
  short stepTemp() throw(pvpException);
  int countTemp() throw(pvpException);
  void setTemp(short) throw(pvpException);
  void reportTemp() throw(pvpException);

  bool availTempSetpoint() throw(pvpException);
  pvpAccess accessTempSetpoint() throw(pvpException);
  short getTempSetpoint() throw(pvpException);
  short minTempSetpoint() throw(pvpException);
  short maxTempSetpoint() throw(pvpException);
  short defaultTempSetpoint() throw(pvpException);
  short stepTempSetpoint() throw(pvpException);
  int countTempSetpoint() throw(pvpException);
  void setTempSetpoint(short) throw(pvpException);
  void reportTempSetpoint() throw(pvpException);

  bool availCamFwVersion() throw(pvpException);
  pvpAccess accessCamFwVersion() throw(pvpException);
  unsigned short getCamFwVersion() throw(pvpException);
  unsigned short minCamFwVersion() throw(pvpException);
  unsigned short maxCamFwVersion() throw(pvpException);
  unsigned short defaultCamFwVersion() throw(pvpException);
  unsigned short stepCamFwVersion() throw(pvpException);
  int countCamFwVersion() throw(pvpException);
  void setCamFwVersion(unsigned short) throw(pvpException);
  void reportCamFwVersion() throw(pvpException);

  bool availHeadSerNumAlpha() throw(pvpException);
  pvpAccess accessHeadSerNumAlpha() throw(pvpException);
  QString getHeadSerNumAlpha() throw(pvpException);
  QString minHeadSerNumAlpha() throw(pvpException);
  QString maxHeadSerNumAlpha() throw(pvpException);
  QString defaultHeadSerNumAlpha() throw(pvpException);
  QString stepHeadSerNumAlpha() throw(pvpException);
  int countHeadSerNumAlpha() throw(pvpException);
  void setHeadSerNumAlpha(QString) throw(pvpException);
  void reportHeadSerNumAlpha() throw(pvpException);

  bool availPciFwVersion() throw(pvpException);
  pvpAccess accessPciFwVersion() throw(pvpException);
  unsigned short getPciFwVersion() throw(pvpException);
  unsigned short minPciFwVersion() throw(pvpException);
  unsigned short maxPciFwVersion() throw(pvpException);
  unsigned short defaultPciFwVersion() throw(pvpException);
  unsigned short stepPciFwVersion() throw(pvpException);
  int countPciFwVersion() throw(pvpException);
  void setPciFwVersion(unsigned short) throw(pvpException);
  void reportPciFwVersion() throw(pvpException);

  bool availCamFwFullVersion() throw(pvpException);
  pvpAccess accessCamFwFullVersion() throw(pvpException);
  QString getCamFwFullVersion() throw(pvpException);
  QString minCamFwFullVersion() throw(pvpException);
  QString maxCamFwFullVersion() throw(pvpException);
  QString defaultCamFwFullVersion() throw(pvpException);
  QString stepCamFwFullVersion() throw(pvpException);
  int countCamFwFullVersion() throw(pvpException);
  void setCamFwFullVersion(QString) throw(pvpException);
  void reportCamFwFullVersion() throw(pvpException);

  class ExposureMode {
  public:
    enum V {
      TimedMode,
      StrobedMode,
      BulbMode,
      TriggerFirstMode,
      FlashMode,
      VariableTimedMode,
      IntStrobeMode,
    };
    ExposureMode(ExposureMode::V x): x(x) {}
    ExposureMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availExposureMode() throw(pvpException);
  pvpAccess accessExposureMode() throw(pvpException);
  pvpCamera::ExposureMode getExposureMode() throw(pvpException);
  pvpCamera::ExposureMode minExposureMode() throw(pvpException);
  pvpCamera::ExposureMode maxExposureMode() throw(pvpException);
  pvpCamera::ExposureMode defaultExposureMode() throw(pvpException);
  pvpCamera::ExposureMode stepExposureMode() throw(pvpException);
  int countExposureMode() throw(pvpException);
  void setExposureMode(pvpCamera::ExposureMode) throw(pvpException);
  void reportExposureMode() throw(pvpException);

  bool availBitDepth() throw(pvpException);
  pvpAccess accessBitDepth() throw(pvpException);
  short getBitDepth() throw(pvpException);
  short minBitDepth() throw(pvpException);
  short maxBitDepth() throw(pvpException);
  short defaultBitDepth() throw(pvpException);
  short stepBitDepth() throw(pvpException);
  int countBitDepth() throw(pvpException);
  void setBitDepth(short) throw(pvpException);
  void reportBitDepth() throw(pvpException);

  bool availGainIndex() throw(pvpException);
  pvpAccess accessGainIndex() throw(pvpException);
  short getGainIndex() throw(pvpException);
  short minGainIndex() throw(pvpException);
  short maxGainIndex() throw(pvpException);
  short defaultGainIndex() throw(pvpException);
  short stepGainIndex() throw(pvpException);
  int countGainIndex() throw(pvpException);
  void setGainIndex(short) throw(pvpException);
  void reportGainIndex() throw(pvpException);

  bool availSpdtabIndex() throw(pvpException);
  pvpAccess accessSpdtabIndex() throw(pvpException);
  short getSpdtabIndex() throw(pvpException);
  short minSpdtabIndex() throw(pvpException);
  short maxSpdtabIndex() throw(pvpException);
  short defaultSpdtabIndex() throw(pvpException);
  short stepSpdtabIndex() throw(pvpException);
  int countSpdtabIndex() throw(pvpException);
  void setSpdtabIndex(short) throw(pvpException);
  void reportSpdtabIndex() throw(pvpException);

  class ReadoutPort {
  public:
    enum V {
      Port1,
      PortMultGain = 0,
      Port2,
      PortNormal = 1,
      PortLowNoise,
      PortHighCap,
    };
    ReadoutPort(ReadoutPort::V x): x(x) {}
    ReadoutPort(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availReadoutPort() throw(pvpException);
  pvpAccess accessReadoutPort() throw(pvpException);
  pvpCamera::ReadoutPort getReadoutPort() throw(pvpException);
  pvpCamera::ReadoutPort minReadoutPort() throw(pvpException);
  pvpCamera::ReadoutPort maxReadoutPort() throw(pvpException);
  pvpCamera::ReadoutPort defaultReadoutPort() throw(pvpException);
  pvpCamera::ReadoutPort stepReadoutPort() throw(pvpException);
  int countReadoutPort() throw(pvpException);
  void setReadoutPort(pvpCamera::ReadoutPort) throw(pvpException);
  void reportReadoutPort() throw(pvpException);

  bool availPixTime() throw(pvpException);
  pvpAccess accessPixTime() throw(pvpException);
  unsigned short getPixTime() throw(pvpException);
  unsigned short minPixTime() throw(pvpException);
  unsigned short maxPixTime() throw(pvpException);
  unsigned short defaultPixTime() throw(pvpException);
  unsigned short stepPixTime() throw(pvpException);
  int countPixTime() throw(pvpException);
  void setPixTime(unsigned short) throw(pvpException);
  void reportPixTime() throw(pvpException);

  bool availShtrCloseDelay() throw(pvpException);
  pvpAccess accessShtrCloseDelay() throw(pvpException);
  unsigned short getShtrCloseDelay() throw(pvpException);
  unsigned short minShtrCloseDelay() throw(pvpException);
  unsigned short maxShtrCloseDelay() throw(pvpException);
  unsigned short defaultShtrCloseDelay() throw(pvpException);
  unsigned short stepShtrCloseDelay() throw(pvpException);
  int countShtrCloseDelay() throw(pvpException);
  void setShtrCloseDelay(unsigned short) throw(pvpException);
  void reportShtrCloseDelay() throw(pvpException);

  bool availShtrOpenDelay() throw(pvpException);
  pvpAccess accessShtrOpenDelay() throw(pvpException);
  unsigned short getShtrOpenDelay() throw(pvpException);
  unsigned short minShtrOpenDelay() throw(pvpException);
  unsigned short maxShtrOpenDelay() throw(pvpException);
  unsigned short defaultShtrOpenDelay() throw(pvpException);
  unsigned short stepShtrOpenDelay() throw(pvpException);
  int countShtrOpenDelay() throw(pvpException);
  void setShtrOpenDelay(unsigned short) throw(pvpException);
  void reportShtrOpenDelay() throw(pvpException);

  class ShtrOpenMode {
  public:
    enum V {
      Never,
      PreExposure,
      PreSequence,
      PreTrigger,
      NoChange,
    };
    ShtrOpenMode(ShtrOpenMode::V x): x(x) {}
    ShtrOpenMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availShtrOpenMode() throw(pvpException);
  pvpAccess accessShtrOpenMode() throw(pvpException);
  pvpCamera::ShtrOpenMode getShtrOpenMode() throw(pvpException);
  pvpCamera::ShtrOpenMode minShtrOpenMode() throw(pvpException);
  pvpCamera::ShtrOpenMode maxShtrOpenMode() throw(pvpException);
  pvpCamera::ShtrOpenMode defaultShtrOpenMode() throw(pvpException);
  pvpCamera::ShtrOpenMode stepShtrOpenMode() throw(pvpException);
  int countShtrOpenMode() throw(pvpException);
  void setShtrOpenMode(pvpCamera::ShtrOpenMode) throw(pvpException);
  void reportShtrOpenMode() throw(pvpException);

  class ShtrStatus {
  public:
    enum V {
      Fault,
      Opening,
      Open,
      Closing,
      Closed,
      Unknown,
    };
    ShtrStatus(ShtrStatus::V x): x(x) {}
    ShtrStatus(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availShtrStatus() throw(pvpException);
  pvpAccess accessShtrStatus() throw(pvpException);
  pvpCamera::ShtrStatus getShtrStatus() throw(pvpException);
  pvpCamera::ShtrStatus minShtrStatus() throw(pvpException);
  pvpCamera::ShtrStatus maxShtrStatus() throw(pvpException);
  pvpCamera::ShtrStatus defaultShtrStatus() throw(pvpException);
  pvpCamera::ShtrStatus stepShtrStatus() throw(pvpException);
  int countShtrStatus() throw(pvpException);
  void setShtrStatus(pvpCamera::ShtrStatus) throw(pvpException);
  void reportShtrStatus() throw(pvpException);

  class ShtrCloseDelayUnit {
  public:
    enum V {
      Usec = 1,
      Msec,
      Sec,
      Minute,
      Hour,
      Nsec = 7,
      Psec,
      Fsec,
      Day,
    };
    ShtrCloseDelayUnit(ShtrCloseDelayUnit::V x): x(x) {}
    ShtrCloseDelayUnit(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availShtrCloseDelayUnit() throw(pvpException);
  pvpAccess accessShtrCloseDelayUnit() throw(pvpException);
  pvpCamera::ShtrCloseDelayUnit getShtrCloseDelayUnit() throw(pvpException);
  pvpCamera::ShtrCloseDelayUnit minShtrCloseDelayUnit() throw(pvpException);
  pvpCamera::ShtrCloseDelayUnit maxShtrCloseDelayUnit() throw(pvpException);
  pvpCamera::ShtrCloseDelayUnit defaultShtrCloseDelayUnit() throw(pvpException);
  pvpCamera::ShtrCloseDelayUnit stepShtrCloseDelayUnit() throw(pvpException);
  int countShtrCloseDelayUnit() throw(pvpException);
  void setShtrCloseDelayUnit(pvpCamera::ShtrCloseDelayUnit) throw(pvpException);
  void reportShtrCloseDelayUnit() throw(pvpException);

  bool availIoAddr() throw(pvpException);
  pvpAccess accessIoAddr() throw(pvpException);
  unsigned short getIoAddr() throw(pvpException);
  unsigned short minIoAddr() throw(pvpException);
  unsigned short maxIoAddr() throw(pvpException);
  unsigned short defaultIoAddr() throw(pvpException);
  unsigned short stepIoAddr() throw(pvpException);
  int countIoAddr() throw(pvpException);
  void setIoAddr(unsigned short) throw(pvpException);
  void reportIoAddr() throw(pvpException);

  class IoType {
  public:
    enum V {
      Ttl,
      Dac,
    };
    IoType(IoType::V x): x(x) {}
    IoType(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availIoType() throw(pvpException);
  pvpAccess accessIoType() throw(pvpException);
  pvpCamera::IoType getIoType() throw(pvpException);
  pvpCamera::IoType minIoType() throw(pvpException);
  pvpCamera::IoType maxIoType() throw(pvpException);
  pvpCamera::IoType defaultIoType() throw(pvpException);
  pvpCamera::IoType stepIoType() throw(pvpException);
  int countIoType() throw(pvpException);
  void setIoType(pvpCamera::IoType) throw(pvpException);
  void reportIoType() throw(pvpException);

  class IoDirection {
  public:
    enum V {
      Input,
      Output,
      InputOutput,
    };
    IoDirection(IoDirection::V x): x(x) {}
    IoDirection(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availIoDirection() throw(pvpException);
  pvpAccess accessIoDirection() throw(pvpException);
  pvpCamera::IoDirection getIoDirection() throw(pvpException);
  pvpCamera::IoDirection minIoDirection() throw(pvpException);
  pvpCamera::IoDirection maxIoDirection() throw(pvpException);
  pvpCamera::IoDirection defaultIoDirection() throw(pvpException);
  pvpCamera::IoDirection stepIoDirection() throw(pvpException);
  int countIoDirection() throw(pvpException);
  void setIoDirection(pvpCamera::IoDirection) throw(pvpException);
  void reportIoDirection() throw(pvpException);

  bool availIoState() throw(pvpException);
  pvpAccess accessIoState() throw(pvpException);
  float getIoState() throw(pvpException);
  float minIoState() throw(pvpException);
  float maxIoState() throw(pvpException);
  float defaultIoState() throw(pvpException);
  float stepIoState() throw(pvpException);
  int countIoState() throw(pvpException);
  void setIoState(float) throw(pvpException);
  void reportIoState() throw(pvpException);

  bool availIoBitdepth() throw(pvpException);
  pvpAccess accessIoBitdepth() throw(pvpException);
  unsigned short getIoBitdepth() throw(pvpException);
  unsigned short minIoBitdepth() throw(pvpException);
  unsigned short maxIoBitdepth() throw(pvpException);
  unsigned short defaultIoBitdepth() throw(pvpException);
  unsigned short stepIoBitdepth() throw(pvpException);
  int countIoBitdepth() throw(pvpException);
  void setIoBitdepth(unsigned short) throw(pvpException);
  void reportIoBitdepth() throw(pvpException);

  bool availGainMultFactor() throw(pvpException);
  pvpAccess accessGainMultFactor() throw(pvpException);
  unsigned short getGainMultFactor() throw(pvpException);
  unsigned short minGainMultFactor() throw(pvpException);
  unsigned short maxGainMultFactor() throw(pvpException);
  unsigned short defaultGainMultFactor() throw(pvpException);
  unsigned short stepGainMultFactor() throw(pvpException);
  int countGainMultFactor() throw(pvpException);
  void setGainMultFactor(unsigned short) throw(pvpException);
  void reportGainMultFactor() throw(pvpException);

  bool availGainMultEnable() throw(pvpException);
  pvpAccess accessGainMultEnable() throw(pvpException);
  bool getGainMultEnable() throw(pvpException);
  bool minGainMultEnable() throw(pvpException);
  bool maxGainMultEnable() throw(pvpException);
  bool defaultGainMultEnable() throw(pvpException);
  bool stepGainMultEnable() throw(pvpException);
  int countGainMultEnable() throw(pvpException);
  void setGainMultEnable(bool) throw(pvpException);
  void reportGainMultEnable() throw(pvpException);

  void reportClass2() throw(pvpException);

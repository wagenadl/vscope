// pvp/pvp_Class2.h - This file is part of VScope.
// (C) Daniel Wagenaar 2008-1017.
/* VScope is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   VScope is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with VScope.  If not, see <http://www.gnu.org/licenses/>.
*/

// pvp_Class2.h - generated by pvcam2param.pl. Do not Edit.

  bool availAdcOffset() /*throw(pvpException)*/;
  pvpAccess accessAdcOffset() /*throw(pvpException)*/;
  int16_t getAdcOffset() /*throw(pvpException)*/;
  int16_t minAdcOffset() /*throw(pvpException)*/;
  int16_t maxAdcOffset() /*throw(pvpException)*/;
  int16_t defaultAdcOffset() /*throw(pvpException)*/;
  int16_t stepAdcOffset() /*throw(pvpException)*/;
  int countAdcOffset() /*throw(pvpException)*/;
  void setAdcOffset(int16_t) /*throw(pvpException)*/;
  void reportAdcOffset() /*throw(pvpException)*/;

  bool availChipName() /*throw(pvpException)*/;
  pvpAccess accessChipName() /*throw(pvpException)*/;
  QString getChipName() /*throw(pvpException)*/;
  QString minChipName() /*throw(pvpException)*/;
  QString maxChipName() /*throw(pvpException)*/;
  QString defaultChipName() /*throw(pvpException)*/;
  QString stepChipName() /*throw(pvpException)*/;
  int countChipName() /*throw(pvpException)*/;
  void setChipName(QString) /*throw(pvpException)*/;
  void reportChipName() /*throw(pvpException)*/;

  bool availSystemName() /*throw(pvpException)*/;
  pvpAccess accessSystemName() /*throw(pvpException)*/;
  QString getSystemName() /*throw(pvpException)*/;
  QString minSystemName() /*throw(pvpException)*/;
  QString maxSystemName() /*throw(pvpException)*/;
  QString defaultSystemName() /*throw(pvpException)*/;
  QString stepSystemName() /*throw(pvpException)*/;
  int countSystemName() /*throw(pvpException)*/;
  void setSystemName(QString) /*throw(pvpException)*/;
  void reportSystemName() /*throw(pvpException)*/;

  bool availVendorName() /*throw(pvpException)*/;
  pvpAccess accessVendorName() /*throw(pvpException)*/;
  QString getVendorName() /*throw(pvpException)*/;
  QString minVendorName() /*throw(pvpException)*/;
  QString maxVendorName() /*throw(pvpException)*/;
  QString defaultVendorName() /*throw(pvpException)*/;
  QString stepVendorName() /*throw(pvpException)*/;
  int countVendorName() /*throw(pvpException)*/;
  void setVendorName(QString) /*throw(pvpException)*/;
  void reportVendorName() /*throw(pvpException)*/;

  bool availProductName() /*throw(pvpException)*/;
  pvpAccess accessProductName() /*throw(pvpException)*/;
  QString getProductName() /*throw(pvpException)*/;
  QString minProductName() /*throw(pvpException)*/;
  QString maxProductName() /*throw(pvpException)*/;
  QString defaultProductName() /*throw(pvpException)*/;
  QString stepProductName() /*throw(pvpException)*/;
  int countProductName() /*throw(pvpException)*/;
  void setProductName(QString) /*throw(pvpException)*/;
  void reportProductName() /*throw(pvpException)*/;

  bool availCameraPartNumber() /*throw(pvpException)*/;
  pvpAccess accessCameraPartNumber() /*throw(pvpException)*/;
  QString getCameraPartNumber() /*throw(pvpException)*/;
  QString minCameraPartNumber() /*throw(pvpException)*/;
  QString maxCameraPartNumber() /*throw(pvpException)*/;
  QString defaultCameraPartNumber() /*throw(pvpException)*/;
  QString stepCameraPartNumber() /*throw(pvpException)*/;
  int countCameraPartNumber() /*throw(pvpException)*/;
  void setCameraPartNumber(QString) /*throw(pvpException)*/;
  void reportCameraPartNumber() /*throw(pvpException)*/;

  class CoolingMode {
  public:
    enum V {
      NormalCool,
      CryoCool,
    };
    CoolingMode(CoolingMode::V x): x(x) {}
    CoolingMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availCoolingMode() /*throw(pvpException)*/;
  pvpAccess accessCoolingMode() /*throw(pvpException)*/;
  pvpCamera::CoolingMode getCoolingMode() /*throw(pvpException)*/;
  pvpCamera::CoolingMode minCoolingMode() /*throw(pvpException)*/;
  pvpCamera::CoolingMode maxCoolingMode() /*throw(pvpException)*/;
  pvpCamera::CoolingMode defaultCoolingMode() /*throw(pvpException)*/;
  pvpCamera::CoolingMode stepCoolingMode() /*throw(pvpException)*/;
  int countCoolingMode() /*throw(pvpException)*/;
  void setCoolingMode(pvpCamera::CoolingMode) /*throw(pvpException)*/;
  void reportCoolingMode() /*throw(pvpException)*/;

  bool availPreampDelay() /*throw(pvpException)*/;
  pvpAccess accessPreampDelay() /*throw(pvpException)*/;
  uint16_t getPreampDelay() /*throw(pvpException)*/;
  uint16_t minPreampDelay() /*throw(pvpException)*/;
  uint16_t maxPreampDelay() /*throw(pvpException)*/;
  uint16_t defaultPreampDelay() /*throw(pvpException)*/;
  uint16_t stepPreampDelay() /*throw(pvpException)*/;
  int countPreampDelay() /*throw(pvpException)*/;
  void setPreampDelay(uint16_t) /*throw(pvpException)*/;
  void reportPreampDelay() /*throw(pvpException)*/;

  class ColorMode {
  public:
    enum V {
      None,
      Reserved,
      Rggb,
      Grbg,
      Gbrg,
      Bggr,
    };
    ColorMode(ColorMode::V x): x(x) {}
    ColorMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availColorMode() /*throw(pvpException)*/;
  pvpAccess accessColorMode() /*throw(pvpException)*/;
  pvpCamera::ColorMode getColorMode() /*throw(pvpException)*/;
  pvpCamera::ColorMode minColorMode() /*throw(pvpException)*/;
  pvpCamera::ColorMode maxColorMode() /*throw(pvpException)*/;
  pvpCamera::ColorMode defaultColorMode() /*throw(pvpException)*/;
  pvpCamera::ColorMode stepColorMode() /*throw(pvpException)*/;
  int countColorMode() /*throw(pvpException)*/;
  void setColorMode(pvpCamera::ColorMode) /*throw(pvpException)*/;
  void reportColorMode() /*throw(pvpException)*/;

  class MppCapable {
  public:
    enum V {
      Unknown,
      AlwaysOff,
      AlwaysOn,
      Selectable,
    };
    MppCapable(MppCapable::V x): x(x) {}
    MppCapable(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availMppCapable() /*throw(pvpException)*/;
  pvpAccess accessMppCapable() /*throw(pvpException)*/;
  pvpCamera::MppCapable getMppCapable() /*throw(pvpException)*/;
  pvpCamera::MppCapable minMppCapable() /*throw(pvpException)*/;
  pvpCamera::MppCapable maxMppCapable() /*throw(pvpException)*/;
  pvpCamera::MppCapable defaultMppCapable() /*throw(pvpException)*/;
  pvpCamera::MppCapable stepMppCapable() /*throw(pvpException)*/;
  int countMppCapable() /*throw(pvpException)*/;
  void setMppCapable(pvpCamera::MppCapable) /*throw(pvpException)*/;
  void reportMppCapable() /*throw(pvpException)*/;

  bool availPreampOffControl() /*throw(pvpException)*/;
  pvpAccess accessPreampOffControl() /*throw(pvpException)*/;
  uint32_t getPreampOffControl() /*throw(pvpException)*/;
  uint32_t minPreampOffControl() /*throw(pvpException)*/;
  uint32_t maxPreampOffControl() /*throw(pvpException)*/;
  uint32_t defaultPreampOffControl() /*throw(pvpException)*/;
  uint32_t stepPreampOffControl() /*throw(pvpException)*/;
  int countPreampOffControl() /*throw(pvpException)*/;
  void setPreampOffControl(uint32_t) /*throw(pvpException)*/;
  void reportPreampOffControl() /*throw(pvpException)*/;

  bool availPremask() /*throw(pvpException)*/;
  pvpAccess accessPremask() /*throw(pvpException)*/;
  uint16_t getPremask() /*throw(pvpException)*/;
  uint16_t minPremask() /*throw(pvpException)*/;
  uint16_t maxPremask() /*throw(pvpException)*/;
  uint16_t defaultPremask() /*throw(pvpException)*/;
  uint16_t stepPremask() /*throw(pvpException)*/;
  int countPremask() /*throw(pvpException)*/;
  void setPremask(uint16_t) /*throw(pvpException)*/;
  void reportPremask() /*throw(pvpException)*/;

  bool availPrescan() /*throw(pvpException)*/;
  pvpAccess accessPrescan() /*throw(pvpException)*/;
  uint16_t getPrescan() /*throw(pvpException)*/;
  uint16_t minPrescan() /*throw(pvpException)*/;
  uint16_t maxPrescan() /*throw(pvpException)*/;
  uint16_t defaultPrescan() /*throw(pvpException)*/;
  uint16_t stepPrescan() /*throw(pvpException)*/;
  int countPrescan() /*throw(pvpException)*/;
  void setPrescan(uint16_t) /*throw(pvpException)*/;
  void reportPrescan() /*throw(pvpException)*/;

  bool availPostmask() /*throw(pvpException)*/;
  pvpAccess accessPostmask() /*throw(pvpException)*/;
  uint16_t getPostmask() /*throw(pvpException)*/;
  uint16_t minPostmask() /*throw(pvpException)*/;
  uint16_t maxPostmask() /*throw(pvpException)*/;
  uint16_t defaultPostmask() /*throw(pvpException)*/;
  uint16_t stepPostmask() /*throw(pvpException)*/;
  int countPostmask() /*throw(pvpException)*/;
  void setPostmask(uint16_t) /*throw(pvpException)*/;
  void reportPostmask() /*throw(pvpException)*/;

  bool availPostscan() /*throw(pvpException)*/;
  pvpAccess accessPostscan() /*throw(pvpException)*/;
  uint16_t getPostscan() /*throw(pvpException)*/;
  uint16_t minPostscan() /*throw(pvpException)*/;
  uint16_t maxPostscan() /*throw(pvpException)*/;
  uint16_t defaultPostscan() /*throw(pvpException)*/;
  uint16_t stepPostscan() /*throw(pvpException)*/;
  int countPostscan() /*throw(pvpException)*/;
  void setPostscan(uint16_t) /*throw(pvpException)*/;
  void reportPostscan() /*throw(pvpException)*/;

  bool availPixParDist() /*throw(pvpException)*/;
  pvpAccess accessPixParDist() /*throw(pvpException)*/;
  uint16_t getPixParDist() /*throw(pvpException)*/;
  uint16_t minPixParDist() /*throw(pvpException)*/;
  uint16_t maxPixParDist() /*throw(pvpException)*/;
  uint16_t defaultPixParDist() /*throw(pvpException)*/;
  uint16_t stepPixParDist() /*throw(pvpException)*/;
  int countPixParDist() /*throw(pvpException)*/;
  void setPixParDist(uint16_t) /*throw(pvpException)*/;
  void reportPixParDist() /*throw(pvpException)*/;

  bool availPixParSize() /*throw(pvpException)*/;
  pvpAccess accessPixParSize() /*throw(pvpException)*/;
  uint16_t getPixParSize() /*throw(pvpException)*/;
  uint16_t minPixParSize() /*throw(pvpException)*/;
  uint16_t maxPixParSize() /*throw(pvpException)*/;
  uint16_t defaultPixParSize() /*throw(pvpException)*/;
  uint16_t stepPixParSize() /*throw(pvpException)*/;
  int countPixParSize() /*throw(pvpException)*/;
  void setPixParSize(uint16_t) /*throw(pvpException)*/;
  void reportPixParSize() /*throw(pvpException)*/;

  bool availPixSerDist() /*throw(pvpException)*/;
  pvpAccess accessPixSerDist() /*throw(pvpException)*/;
  uint16_t getPixSerDist() /*throw(pvpException)*/;
  uint16_t minPixSerDist() /*throw(pvpException)*/;
  uint16_t maxPixSerDist() /*throw(pvpException)*/;
  uint16_t defaultPixSerDist() /*throw(pvpException)*/;
  uint16_t stepPixSerDist() /*throw(pvpException)*/;
  int countPixSerDist() /*throw(pvpException)*/;
  void setPixSerDist(uint16_t) /*throw(pvpException)*/;
  void reportPixSerDist() /*throw(pvpException)*/;

  bool availPixSerSize() /*throw(pvpException)*/;
  pvpAccess accessPixSerSize() /*throw(pvpException)*/;
  uint16_t getPixSerSize() /*throw(pvpException)*/;
  uint16_t minPixSerSize() /*throw(pvpException)*/;
  uint16_t maxPixSerSize() /*throw(pvpException)*/;
  uint16_t defaultPixSerSize() /*throw(pvpException)*/;
  uint16_t stepPixSerSize() /*throw(pvpException)*/;
  int countPixSerSize() /*throw(pvpException)*/;
  void setPixSerSize(uint16_t) /*throw(pvpException)*/;
  void reportPixSerSize() /*throw(pvpException)*/;

  bool availSummingWell() /*throw(pvpException)*/;
  pvpAccess accessSummingWell() /*throw(pvpException)*/;
  bool getSummingWell() /*throw(pvpException)*/;
  bool minSummingWell() /*throw(pvpException)*/;
  bool maxSummingWell() /*throw(pvpException)*/;
  bool defaultSummingWell() /*throw(pvpException)*/;
  bool stepSummingWell() /*throw(pvpException)*/;
  int countSummingWell() /*throw(pvpException)*/;
  void setSummingWell(bool) /*throw(pvpException)*/;
  void reportSummingWell() /*throw(pvpException)*/;

  bool availFwellCapacity() /*throw(pvpException)*/;
  pvpAccess accessFwellCapacity() /*throw(pvpException)*/;
  uint32_t getFwellCapacity() /*throw(pvpException)*/;
  uint32_t minFwellCapacity() /*throw(pvpException)*/;
  uint32_t maxFwellCapacity() /*throw(pvpException)*/;
  uint32_t defaultFwellCapacity() /*throw(pvpException)*/;
  uint32_t stepFwellCapacity() /*throw(pvpException)*/;
  int countFwellCapacity() /*throw(pvpException)*/;
  void setFwellCapacity(uint32_t) /*throw(pvpException)*/;
  void reportFwellCapacity() /*throw(pvpException)*/;

  bool availParSize() /*throw(pvpException)*/;
  pvpAccess accessParSize() /*throw(pvpException)*/;
  uint16_t getParSize() /*throw(pvpException)*/;
  uint16_t minParSize() /*throw(pvpException)*/;
  uint16_t maxParSize() /*throw(pvpException)*/;
  uint16_t defaultParSize() /*throw(pvpException)*/;
  uint16_t stepParSize() /*throw(pvpException)*/;
  int countParSize() /*throw(pvpException)*/;
  void setParSize(uint16_t) /*throw(pvpException)*/;
  void reportParSize() /*throw(pvpException)*/;

  bool availSerSize() /*throw(pvpException)*/;
  pvpAccess accessSerSize() /*throw(pvpException)*/;
  uint16_t getSerSize() /*throw(pvpException)*/;
  uint16_t minSerSize() /*throw(pvpException)*/;
  uint16_t maxSerSize() /*throw(pvpException)*/;
  uint16_t defaultSerSize() /*throw(pvpException)*/;
  uint16_t stepSerSize() /*throw(pvpException)*/;
  int countSerSize() /*throw(pvpException)*/;
  void setSerSize(uint16_t) /*throw(pvpException)*/;
  void reportSerSize() /*throw(pvpException)*/;

  bool availAccumCapable() /*throw(pvpException)*/;
  pvpAccess accessAccumCapable() /*throw(pvpException)*/;
  bool getAccumCapable() /*throw(pvpException)*/;
  bool minAccumCapable() /*throw(pvpException)*/;
  bool maxAccumCapable() /*throw(pvpException)*/;
  bool defaultAccumCapable() /*throw(pvpException)*/;
  bool stepAccumCapable() /*throw(pvpException)*/;
  int countAccumCapable() /*throw(pvpException)*/;
  void setAccumCapable(bool) /*throw(pvpException)*/;
  void reportAccumCapable() /*throw(pvpException)*/;

  bool availFlashDwnldCapable() /*throw(pvpException)*/;
  pvpAccess accessFlashDwnldCapable() /*throw(pvpException)*/;
  bool getFlashDwnldCapable() /*throw(pvpException)*/;
  bool minFlashDwnldCapable() /*throw(pvpException)*/;
  bool maxFlashDwnldCapable() /*throw(pvpException)*/;
  bool defaultFlashDwnldCapable() /*throw(pvpException)*/;
  bool stepFlashDwnldCapable() /*throw(pvpException)*/;
  int countFlashDwnldCapable() /*throw(pvpException)*/;
  void setFlashDwnldCapable(bool) /*throw(pvpException)*/;
  void reportFlashDwnldCapable() /*throw(pvpException)*/;

  bool availReadoutTime() /*throw(pvpException)*/;
  pvpAccess accessReadoutTime() /*throw(pvpException)*/;
  double getReadoutTime() /*throw(pvpException)*/;
  double minReadoutTime() /*throw(pvpException)*/;
  double maxReadoutTime() /*throw(pvpException)*/;
  double defaultReadoutTime() /*throw(pvpException)*/;
  double stepReadoutTime() /*throw(pvpException)*/;
  int countReadoutTime() /*throw(pvpException)*/;
  void setReadoutTime(double) /*throw(pvpException)*/;
  void reportReadoutTime() /*throw(pvpException)*/;

  bool availClearCycles() /*throw(pvpException)*/;
  pvpAccess accessClearCycles() /*throw(pvpException)*/;
  uint16_t getClearCycles() /*throw(pvpException)*/;
  uint16_t minClearCycles() /*throw(pvpException)*/;
  uint16_t maxClearCycles() /*throw(pvpException)*/;
  uint16_t defaultClearCycles() /*throw(pvpException)*/;
  uint16_t stepClearCycles() /*throw(pvpException)*/;
  int countClearCycles() /*throw(pvpException)*/;
  void setClearCycles(uint16_t) /*throw(pvpException)*/;
  void reportClearCycles() /*throw(pvpException)*/;

  class ClearMode {
  public:
    enum V {
      ClearNever,
      ClearPreExposure,
      ClearPreSequence,
      ClearPostSequence,
      ClearPrePostSequence,
      ClearPreExposurePostSeq,
      MaxClearMode,
    };
    ClearMode(ClearMode::V x): x(x) {}
    ClearMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availClearMode() /*throw(pvpException)*/;
  pvpAccess accessClearMode() /*throw(pvpException)*/;
  pvpCamera::ClearMode getClearMode() /*throw(pvpException)*/;
  pvpCamera::ClearMode minClearMode() /*throw(pvpException)*/;
  pvpCamera::ClearMode maxClearMode() /*throw(pvpException)*/;
  pvpCamera::ClearMode defaultClearMode() /*throw(pvpException)*/;
  pvpCamera::ClearMode stepClearMode() /*throw(pvpException)*/;
  int countClearMode() /*throw(pvpException)*/;
  void setClearMode(pvpCamera::ClearMode) /*throw(pvpException)*/;
  void reportClearMode() /*throw(pvpException)*/;

  bool availFrameCapable() /*throw(pvpException)*/;
  pvpAccess accessFrameCapable() /*throw(pvpException)*/;
  bool getFrameCapable() /*throw(pvpException)*/;
  bool minFrameCapable() /*throw(pvpException)*/;
  bool maxFrameCapable() /*throw(pvpException)*/;
  bool defaultFrameCapable() /*throw(pvpException)*/;
  bool stepFrameCapable() /*throw(pvpException)*/;
  int countFrameCapable() /*throw(pvpException)*/;
  void setFrameCapable(bool) /*throw(pvpException)*/;
  void reportFrameCapable() /*throw(pvpException)*/;

  class Pmode {
  public:
    enum V {
      Normal,
      Ft,
      Mpp,
      FtMpp,
      AltNormal,
      AltFt,
      AltMpp,
      AltFtMpp,
    };
    Pmode(Pmode::V x): x(x) {}
    Pmode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availPmode() /*throw(pvpException)*/;
  pvpAccess accessPmode() /*throw(pvpException)*/;
  pvpCamera::Pmode getPmode() /*throw(pvpException)*/;
  pvpCamera::Pmode minPmode() /*throw(pvpException)*/;
  pvpCamera::Pmode maxPmode() /*throw(pvpException)*/;
  pvpCamera::Pmode defaultPmode() /*throw(pvpException)*/;
  pvpCamera::Pmode stepPmode() /*throw(pvpException)*/;
  int countPmode() /*throw(pvpException)*/;
  void setPmode(pvpCamera::Pmode) /*throw(pvpException)*/;
  void reportPmode() /*throw(pvpException)*/;

  bool availTemp() /*throw(pvpException)*/;
  pvpAccess accessTemp() /*throw(pvpException)*/;
  int16_t getTemp() /*throw(pvpException)*/;
  int16_t minTemp() /*throw(pvpException)*/;
  int16_t maxTemp() /*throw(pvpException)*/;
  int16_t defaultTemp() /*throw(pvpException)*/;
  int16_t stepTemp() /*throw(pvpException)*/;
  int countTemp() /*throw(pvpException)*/;
  void setTemp(int16_t) /*throw(pvpException)*/;
  void reportTemp() /*throw(pvpException)*/;

  bool availTempSetpoint() /*throw(pvpException)*/;
  pvpAccess accessTempSetpoint() /*throw(pvpException)*/;
  int16_t getTempSetpoint() /*throw(pvpException)*/;
  int16_t minTempSetpoint() /*throw(pvpException)*/;
  int16_t maxTempSetpoint() /*throw(pvpException)*/;
  int16_t defaultTempSetpoint() /*throw(pvpException)*/;
  int16_t stepTempSetpoint() /*throw(pvpException)*/;
  int countTempSetpoint() /*throw(pvpException)*/;
  void setTempSetpoint(int16_t) /*throw(pvpException)*/;
  void reportTempSetpoint() /*throw(pvpException)*/;

  bool availCamFwVersion() /*throw(pvpException)*/;
  pvpAccess accessCamFwVersion() /*throw(pvpException)*/;
  uint16_t getCamFwVersion() /*throw(pvpException)*/;
  uint16_t minCamFwVersion() /*throw(pvpException)*/;
  uint16_t maxCamFwVersion() /*throw(pvpException)*/;
  uint16_t defaultCamFwVersion() /*throw(pvpException)*/;
  uint16_t stepCamFwVersion() /*throw(pvpException)*/;
  int countCamFwVersion() /*throw(pvpException)*/;
  void setCamFwVersion(uint16_t) /*throw(pvpException)*/;
  void reportCamFwVersion() /*throw(pvpException)*/;

  bool availHeadSerNumAlpha() /*throw(pvpException)*/;
  pvpAccess accessHeadSerNumAlpha() /*throw(pvpException)*/;
  QString getHeadSerNumAlpha() /*throw(pvpException)*/;
  QString minHeadSerNumAlpha() /*throw(pvpException)*/;
  QString maxHeadSerNumAlpha() /*throw(pvpException)*/;
  QString defaultHeadSerNumAlpha() /*throw(pvpException)*/;
  QString stepHeadSerNumAlpha() /*throw(pvpException)*/;
  int countHeadSerNumAlpha() /*throw(pvpException)*/;
  void setHeadSerNumAlpha(QString) /*throw(pvpException)*/;
  void reportHeadSerNumAlpha() /*throw(pvpException)*/;

  bool availPciFwVersion() /*throw(pvpException)*/;
  pvpAccess accessPciFwVersion() /*throw(pvpException)*/;
  uint16_t getPciFwVersion() /*throw(pvpException)*/;
  uint16_t minPciFwVersion() /*throw(pvpException)*/;
  uint16_t maxPciFwVersion() /*throw(pvpException)*/;
  uint16_t defaultPciFwVersion() /*throw(pvpException)*/;
  uint16_t stepPciFwVersion() /*throw(pvpException)*/;
  int countPciFwVersion() /*throw(pvpException)*/;
  void setPciFwVersion(uint16_t) /*throw(pvpException)*/;
  void reportPciFwVersion() /*throw(pvpException)*/;

  class FanSpeedSetpoint {
  public:
    enum V {
      High,
      Medium,
      Low,
      Off,
    };
    FanSpeedSetpoint(FanSpeedSetpoint::V x): x(x) {}
    FanSpeedSetpoint(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availFanSpeedSetpoint() /*throw(pvpException)*/;
  pvpAccess accessFanSpeedSetpoint() /*throw(pvpException)*/;
  pvpCamera::FanSpeedSetpoint getFanSpeedSetpoint() /*throw(pvpException)*/;
  pvpCamera::FanSpeedSetpoint minFanSpeedSetpoint() /*throw(pvpException)*/;
  pvpCamera::FanSpeedSetpoint maxFanSpeedSetpoint() /*throw(pvpException)*/;
  pvpCamera::FanSpeedSetpoint defaultFanSpeedSetpoint() /*throw(pvpException)*/;
  pvpCamera::FanSpeedSetpoint stepFanSpeedSetpoint() /*throw(pvpException)*/;
  int countFanSpeedSetpoint() /*throw(pvpException)*/;
  void setFanSpeedSetpoint(pvpCamera::FanSpeedSetpoint) /*throw(pvpException)*/;
  void reportFanSpeedSetpoint() /*throw(pvpException)*/;

  class ExposureMode {
  public:
    enum V {
      TimedMode,
      StrobedMode,
      BulbMode,
      TriggerFirstMode,
      FlashMode,
      VariableTimedMode,
      IntStrobeMode,
      MaxExposeMode,
      ExtTrigInternal = 1792,
      ExtTrigTrigFirst = 2048,
      ExtTrigEdgeRising = 2304,
    };
    ExposureMode(ExposureMode::V x): x(x) {}
    ExposureMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availExposureMode() /*throw(pvpException)*/;
  pvpAccess accessExposureMode() /*throw(pvpException)*/;
  pvpCamera::ExposureMode getExposureMode() /*throw(pvpException)*/;
  pvpCamera::ExposureMode minExposureMode() /*throw(pvpException)*/;
  pvpCamera::ExposureMode maxExposureMode() /*throw(pvpException)*/;
  pvpCamera::ExposureMode defaultExposureMode() /*throw(pvpException)*/;
  pvpCamera::ExposureMode stepExposureMode() /*throw(pvpException)*/;
  int countExposureMode() /*throw(pvpException)*/;
  void setExposureMode(pvpCamera::ExposureMode) /*throw(pvpException)*/;
  void reportExposureMode() /*throw(pvpException)*/;

  class ExposeOutMode {
  public:
    enum V {
      ExposeOutFirstRow,
      ExposeOutAllRows,
      ExposeOutAnyRow,
      MaxExposeOutMode,
    };
    ExposeOutMode(ExposeOutMode::V x): x(x) {}
    ExposeOutMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availExposeOutMode() /*throw(pvpException)*/;
  pvpAccess accessExposeOutMode() /*throw(pvpException)*/;
  pvpCamera::ExposeOutMode getExposeOutMode() /*throw(pvpException)*/;
  pvpCamera::ExposeOutMode minExposeOutMode() /*throw(pvpException)*/;
  pvpCamera::ExposeOutMode maxExposeOutMode() /*throw(pvpException)*/;
  pvpCamera::ExposeOutMode defaultExposeOutMode() /*throw(pvpException)*/;
  pvpCamera::ExposeOutMode stepExposeOutMode() /*throw(pvpException)*/;
  int countExposeOutMode() /*throw(pvpException)*/;
  void setExposeOutMode(pvpCamera::ExposeOutMode) /*throw(pvpException)*/;
  void reportExposeOutMode() /*throw(pvpException)*/;

  bool availBitDepth() /*throw(pvpException)*/;
  pvpAccess accessBitDepth() /*throw(pvpException)*/;
  int16_t getBitDepth() /*throw(pvpException)*/;
  int16_t minBitDepth() /*throw(pvpException)*/;
  int16_t maxBitDepth() /*throw(pvpException)*/;
  int16_t defaultBitDepth() /*throw(pvpException)*/;
  int16_t stepBitDepth() /*throw(pvpException)*/;
  int countBitDepth() /*throw(pvpException)*/;
  void setBitDepth(int16_t) /*throw(pvpException)*/;
  void reportBitDepth() /*throw(pvpException)*/;

  bool availGainIndex() /*throw(pvpException)*/;
  pvpAccess accessGainIndex() /*throw(pvpException)*/;
  int16_t getGainIndex() /*throw(pvpException)*/;
  int16_t minGainIndex() /*throw(pvpException)*/;
  int16_t maxGainIndex() /*throw(pvpException)*/;
  int16_t defaultGainIndex() /*throw(pvpException)*/;
  int16_t stepGainIndex() /*throw(pvpException)*/;
  int countGainIndex() /*throw(pvpException)*/;
  void setGainIndex(int16_t) /*throw(pvpException)*/;
  void reportGainIndex() /*throw(pvpException)*/;

  bool availSpdtabIndex() /*throw(pvpException)*/;
  pvpAccess accessSpdtabIndex() /*throw(pvpException)*/;
  int16_t getSpdtabIndex() /*throw(pvpException)*/;
  int16_t minSpdtabIndex() /*throw(pvpException)*/;
  int16_t maxSpdtabIndex() /*throw(pvpException)*/;
  int16_t defaultSpdtabIndex() /*throw(pvpException)*/;
  int16_t stepSpdtabIndex() /*throw(pvpException)*/;
  int countSpdtabIndex() /*throw(pvpException)*/;
  void setSpdtabIndex(int16_t) /*throw(pvpException)*/;
  void reportSpdtabIndex() /*throw(pvpException)*/;

  bool availGainName() /*throw(pvpException)*/;
  pvpAccess accessGainName() /*throw(pvpException)*/;
  QString getGainName() /*throw(pvpException)*/;
  QString minGainName() /*throw(pvpException)*/;
  QString maxGainName() /*throw(pvpException)*/;
  QString defaultGainName() /*throw(pvpException)*/;
  QString stepGainName() /*throw(pvpException)*/;
  int countGainName() /*throw(pvpException)*/;
  void setGainName(QString) /*throw(pvpException)*/;
  void reportGainName() /*throw(pvpException)*/;

  class ReadoutPort {
  public:
    enum V {
      X0,
      X1,
    };
    ReadoutPort(ReadoutPort::V x): x(x) {}
    ReadoutPort(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availReadoutPort() /*throw(pvpException)*/;
  pvpAccess accessReadoutPort() /*throw(pvpException)*/;
  pvpCamera::ReadoutPort getReadoutPort() /*throw(pvpException)*/;
  pvpCamera::ReadoutPort minReadoutPort() /*throw(pvpException)*/;
  pvpCamera::ReadoutPort maxReadoutPort() /*throw(pvpException)*/;
  pvpCamera::ReadoutPort defaultReadoutPort() /*throw(pvpException)*/;
  pvpCamera::ReadoutPort stepReadoutPort() /*throw(pvpException)*/;
  int countReadoutPort() /*throw(pvpException)*/;
  void setReadoutPort(pvpCamera::ReadoutPort) /*throw(pvpException)*/;
  void reportReadoutPort() /*throw(pvpException)*/;

  bool availPixTime() /*throw(pvpException)*/;
  pvpAccess accessPixTime() /*throw(pvpException)*/;
  uint16_t getPixTime() /*throw(pvpException)*/;
  uint16_t minPixTime() /*throw(pvpException)*/;
  uint16_t maxPixTime() /*throw(pvpException)*/;
  uint16_t defaultPixTime() /*throw(pvpException)*/;
  uint16_t stepPixTime() /*throw(pvpException)*/;
  int countPixTime() /*throw(pvpException)*/;
  void setPixTime(uint16_t) /*throw(pvpException)*/;
  void reportPixTime() /*throw(pvpException)*/;

  bool availShtrCloseDelay() /*throw(pvpException)*/;
  pvpAccess accessShtrCloseDelay() /*throw(pvpException)*/;
  uint16_t getShtrCloseDelay() /*throw(pvpException)*/;
  uint16_t minShtrCloseDelay() /*throw(pvpException)*/;
  uint16_t maxShtrCloseDelay() /*throw(pvpException)*/;
  uint16_t defaultShtrCloseDelay() /*throw(pvpException)*/;
  uint16_t stepShtrCloseDelay() /*throw(pvpException)*/;
  int countShtrCloseDelay() /*throw(pvpException)*/;
  void setShtrCloseDelay(uint16_t) /*throw(pvpException)*/;
  void reportShtrCloseDelay() /*throw(pvpException)*/;

  bool availShtrOpenDelay() /*throw(pvpException)*/;
  pvpAccess accessShtrOpenDelay() /*throw(pvpException)*/;
  uint16_t getShtrOpenDelay() /*throw(pvpException)*/;
  uint16_t minShtrOpenDelay() /*throw(pvpException)*/;
  uint16_t maxShtrOpenDelay() /*throw(pvpException)*/;
  uint16_t defaultShtrOpenDelay() /*throw(pvpException)*/;
  uint16_t stepShtrOpenDelay() /*throw(pvpException)*/;
  int countShtrOpenDelay() /*throw(pvpException)*/;
  void setShtrOpenDelay(uint16_t) /*throw(pvpException)*/;
  void reportShtrOpenDelay() /*throw(pvpException)*/;

  class ShtrOpenMode {
  public:
    enum V {
      Never,
      PreExposure,
      PreSequence,
      PreTrigger,
      NoChange,
    };
    ShtrOpenMode(ShtrOpenMode::V x): x(x) {}
    ShtrOpenMode(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availShtrOpenMode() /*throw(pvpException)*/;
  pvpAccess accessShtrOpenMode() /*throw(pvpException)*/;
  pvpCamera::ShtrOpenMode getShtrOpenMode() /*throw(pvpException)*/;
  pvpCamera::ShtrOpenMode minShtrOpenMode() /*throw(pvpException)*/;
  pvpCamera::ShtrOpenMode maxShtrOpenMode() /*throw(pvpException)*/;
  pvpCamera::ShtrOpenMode defaultShtrOpenMode() /*throw(pvpException)*/;
  pvpCamera::ShtrOpenMode stepShtrOpenMode() /*throw(pvpException)*/;
  int countShtrOpenMode() /*throw(pvpException)*/;
  void setShtrOpenMode(pvpCamera::ShtrOpenMode) /*throw(pvpException)*/;
  void reportShtrOpenMode() /*throw(pvpException)*/;

  class ShtrStatus {
  public:
    enum V {
      Fault,
      Opening,
      Open,
      Closing,
      Closed,
      Unknown,
    };
    ShtrStatus(ShtrStatus::V x): x(x) {}
    ShtrStatus(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availShtrStatus() /*throw(pvpException)*/;
  pvpAccess accessShtrStatus() /*throw(pvpException)*/;
  pvpCamera::ShtrStatus getShtrStatus() /*throw(pvpException)*/;
  pvpCamera::ShtrStatus minShtrStatus() /*throw(pvpException)*/;
  pvpCamera::ShtrStatus maxShtrStatus() /*throw(pvpException)*/;
  pvpCamera::ShtrStatus defaultShtrStatus() /*throw(pvpException)*/;
  pvpCamera::ShtrStatus stepShtrStatus() /*throw(pvpException)*/;
  int countShtrStatus() /*throw(pvpException)*/;
  void setShtrStatus(pvpCamera::ShtrStatus) /*throw(pvpException)*/;
  void reportShtrStatus() /*throw(pvpException)*/;

  bool availIoAddr() /*throw(pvpException)*/;
  pvpAccess accessIoAddr() /*throw(pvpException)*/;
  uint16_t getIoAddr() /*throw(pvpException)*/;
  uint16_t minIoAddr() /*throw(pvpException)*/;
  uint16_t maxIoAddr() /*throw(pvpException)*/;
  uint16_t defaultIoAddr() /*throw(pvpException)*/;
  uint16_t stepIoAddr() /*throw(pvpException)*/;
  int countIoAddr() /*throw(pvpException)*/;
  void setIoAddr(uint16_t) /*throw(pvpException)*/;
  void reportIoAddr() /*throw(pvpException)*/;

  class IoType {
  public:
    enum V {
      Ttl,
      Dac,
    };
    IoType(IoType::V x): x(x) {}
    IoType(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availIoType() /*throw(pvpException)*/;
  pvpAccess accessIoType() /*throw(pvpException)*/;
  pvpCamera::IoType getIoType() /*throw(pvpException)*/;
  pvpCamera::IoType minIoType() /*throw(pvpException)*/;
  pvpCamera::IoType maxIoType() /*throw(pvpException)*/;
  pvpCamera::IoType defaultIoType() /*throw(pvpException)*/;
  pvpCamera::IoType stepIoType() /*throw(pvpException)*/;
  int countIoType() /*throw(pvpException)*/;
  void setIoType(pvpCamera::IoType) /*throw(pvpException)*/;
  void reportIoType() /*throw(pvpException)*/;

  class IoDirection {
  public:
    enum V {
      Input,
      Output,
      InputOutput,
    };
    IoDirection(IoDirection::V x): x(x) {}
    IoDirection(int x0=0) { x=(V)(x0); }
    operator pvpEnumInt() const { return x; }
    char const *decode() const;
  private:
    V x;
  };

  bool availIoDirection() /*throw(pvpException)*/;
  pvpAccess accessIoDirection() /*throw(pvpException)*/;
  pvpCamera::IoDirection getIoDirection() /*throw(pvpException)*/;
  pvpCamera::IoDirection minIoDirection() /*throw(pvpException)*/;
  pvpCamera::IoDirection maxIoDirection() /*throw(pvpException)*/;
  pvpCamera::IoDirection defaultIoDirection() /*throw(pvpException)*/;
  pvpCamera::IoDirection stepIoDirection() /*throw(pvpException)*/;
  int countIoDirection() /*throw(pvpException)*/;
  void setIoDirection(pvpCamera::IoDirection) /*throw(pvpException)*/;
  void reportIoDirection() /*throw(pvpException)*/;

  bool availIoState() /*throw(pvpException)*/;
  pvpAccess accessIoState() /*throw(pvpException)*/;
  double getIoState() /*throw(pvpException)*/;
  double minIoState() /*throw(pvpException)*/;
  double maxIoState() /*throw(pvpException)*/;
  double defaultIoState() /*throw(pvpException)*/;
  double stepIoState() /*throw(pvpException)*/;
  int countIoState() /*throw(pvpException)*/;
  void setIoState(double) /*throw(pvpException)*/;
  void reportIoState() /*throw(pvpException)*/;

  bool availIoBitdepth() /*throw(pvpException)*/;
  pvpAccess accessIoBitdepth() /*throw(pvpException)*/;
  uint16_t getIoBitdepth() /*throw(pvpException)*/;
  uint16_t minIoBitdepth() /*throw(pvpException)*/;
  uint16_t maxIoBitdepth() /*throw(pvpException)*/;
  uint16_t defaultIoBitdepth() /*throw(pvpException)*/;
  uint16_t stepIoBitdepth() /*throw(pvpException)*/;
  int countIoBitdepth() /*throw(pvpException)*/;
  void setIoBitdepth(uint16_t) /*throw(pvpException)*/;
  void reportIoBitdepth() /*throw(pvpException)*/;

  bool availGainMultFactor() /*throw(pvpException)*/;
  pvpAccess accessGainMultFactor() /*throw(pvpException)*/;
  uint16_t getGainMultFactor() /*throw(pvpException)*/;
  uint16_t minGainMultFactor() /*throw(pvpException)*/;
  uint16_t maxGainMultFactor() /*throw(pvpException)*/;
  uint16_t defaultGainMultFactor() /*throw(pvpException)*/;
  uint16_t stepGainMultFactor() /*throw(pvpException)*/;
  int countGainMultFactor() /*throw(pvpException)*/;
  void setGainMultFactor(uint16_t) /*throw(pvpException)*/;
  void reportGainMultFactor() /*throw(pvpException)*/;

  bool availGainMultEnable() /*throw(pvpException)*/;
  pvpAccess accessGainMultEnable() /*throw(pvpException)*/;
  bool getGainMultEnable() /*throw(pvpException)*/;
  bool minGainMultEnable() /*throw(pvpException)*/;
  bool maxGainMultEnable() /*throw(pvpException)*/;
  bool defaultGainMultEnable() /*throw(pvpException)*/;
  bool stepGainMultEnable() /*throw(pvpException)*/;
  int countGainMultEnable() /*throw(pvpException)*/;
  void setGainMultEnable(bool) /*throw(pvpException)*/;
  void reportGainMultEnable() /*throw(pvpException)*/;

  bool availPpFeatName() /*throw(pvpException)*/;
  pvpAccess accessPpFeatName() /*throw(pvpException)*/;
  QString getPpFeatName() /*throw(pvpException)*/;
  QString minPpFeatName() /*throw(pvpException)*/;
  QString maxPpFeatName() /*throw(pvpException)*/;
  QString defaultPpFeatName() /*throw(pvpException)*/;
  QString stepPpFeatName() /*throw(pvpException)*/;
  int countPpFeatName() /*throw(pvpException)*/;
  void setPpFeatName(QString) /*throw(pvpException)*/;
  void reportPpFeatName() /*throw(pvpException)*/;

  bool availPpIndex() /*throw(pvpException)*/;
  pvpAccess accessPpIndex() /*throw(pvpException)*/;
  int16_t getPpIndex() /*throw(pvpException)*/;
  int16_t minPpIndex() /*throw(pvpException)*/;
  int16_t maxPpIndex() /*throw(pvpException)*/;
  int16_t defaultPpIndex() /*throw(pvpException)*/;
  int16_t stepPpIndex() /*throw(pvpException)*/;
  int countPpIndex() /*throw(pvpException)*/;
  void setPpIndex(int16_t) /*throw(pvpException)*/;
  void reportPpIndex() /*throw(pvpException)*/;

  bool availActualGain() /*throw(pvpException)*/;
  pvpAccess accessActualGain() /*throw(pvpException)*/;
  uint16_t getActualGain() /*throw(pvpException)*/;
  uint16_t minActualGain() /*throw(pvpException)*/;
  uint16_t maxActualGain() /*throw(pvpException)*/;
  uint16_t defaultActualGain() /*throw(pvpException)*/;
  uint16_t stepActualGain() /*throw(pvpException)*/;
  int countActualGain() /*throw(pvpException)*/;
  void setActualGain(uint16_t) /*throw(pvpException)*/;
  void reportActualGain() /*throw(pvpException)*/;

  bool availPpParamIndex() /*throw(pvpException)*/;
  pvpAccess accessPpParamIndex() /*throw(pvpException)*/;
  int16_t getPpParamIndex() /*throw(pvpException)*/;
  int16_t minPpParamIndex() /*throw(pvpException)*/;
  int16_t maxPpParamIndex() /*throw(pvpException)*/;
  int16_t defaultPpParamIndex() /*throw(pvpException)*/;
  int16_t stepPpParamIndex() /*throw(pvpException)*/;
  int countPpParamIndex() /*throw(pvpException)*/;
  void setPpParamIndex(int16_t) /*throw(pvpException)*/;
  void reportPpParamIndex() /*throw(pvpException)*/;

  bool availPpParamName() /*throw(pvpException)*/;
  pvpAccess accessPpParamName() /*throw(pvpException)*/;
  QString getPpParamName() /*throw(pvpException)*/;
  QString minPpParamName() /*throw(pvpException)*/;
  QString maxPpParamName() /*throw(pvpException)*/;
  QString defaultPpParamName() /*throw(pvpException)*/;
  QString stepPpParamName() /*throw(pvpException)*/;
  int countPpParamName() /*throw(pvpException)*/;
  void setPpParamName(QString) /*throw(pvpException)*/;
  void reportPpParamName() /*throw(pvpException)*/;

  bool availPpParam() /*throw(pvpException)*/;
  pvpAccess accessPpParam() /*throw(pvpException)*/;
  uint32_t getPpParam() /*throw(pvpException)*/;
  uint32_t minPpParam() /*throw(pvpException)*/;
  uint32_t maxPpParam() /*throw(pvpException)*/;
  uint32_t defaultPpParam() /*throw(pvpException)*/;
  uint32_t stepPpParam() /*throw(pvpException)*/;
  int countPpParam() /*throw(pvpException)*/;
  void setPpParam(uint32_t) /*throw(pvpException)*/;
  void reportPpParam() /*throw(pvpException)*/;

  bool availReadNoise() /*throw(pvpException)*/;
  pvpAccess accessReadNoise() /*throw(pvpException)*/;
  uint16_t getReadNoise() /*throw(pvpException)*/;
  uint16_t minReadNoise() /*throw(pvpException)*/;
  uint16_t maxReadNoise() /*throw(pvpException)*/;
  uint16_t defaultReadNoise() /*throw(pvpException)*/;
  uint16_t stepReadNoise() /*throw(pvpException)*/;
  int countReadNoise() /*throw(pvpException)*/;
  void setReadNoise(uint16_t) /*throw(pvpException)*/;
  void reportReadNoise() /*throw(pvpException)*/;

  bool availPpFeatId() /*throw(pvpException)*/;
  pvpAccess accessPpFeatId() /*throw(pvpException)*/;
  uint16_t getPpFeatId() /*throw(pvpException)*/;
  uint16_t minPpFeatId() /*throw(pvpException)*/;
  uint16_t maxPpFeatId() /*throw(pvpException)*/;
  uint16_t defaultPpFeatId() /*throw(pvpException)*/;
  uint16_t stepPpFeatId() /*throw(pvpException)*/;
  int countPpFeatId() /*throw(pvpException)*/;
  void setPpFeatId(uint16_t) /*throw(pvpException)*/;
  void reportPpFeatId() /*throw(pvpException)*/;

  bool availPpParamId() /*throw(pvpException)*/;
  pvpAccess accessPpParamId() /*throw(pvpException)*/;
  uint16_t getPpParamId() /*throw(pvpException)*/;
  uint16_t minPpParamId() /*throw(pvpException)*/;
  uint16_t maxPpParamId() /*throw(pvpException)*/;
  uint16_t defaultPpParamId() /*throw(pvpException)*/;
  uint16_t stepPpParamId() /*throw(pvpException)*/;
  int countPpParamId() /*throw(pvpException)*/;
  void setPpParamId(uint16_t) /*throw(pvpException)*/;
  void reportPpParamId() /*throw(pvpException)*/;

  bool availSmartStreamModeEnabled() /*throw(pvpException)*/;
  pvpAccess accessSmartStreamModeEnabled() /*throw(pvpException)*/;
  bool getSmartStreamModeEnabled() /*throw(pvpException)*/;
  bool minSmartStreamModeEnabled() /*throw(pvpException)*/;
  bool maxSmartStreamModeEnabled() /*throw(pvpException)*/;
  bool defaultSmartStreamModeEnabled() /*throw(pvpException)*/;
  bool stepSmartStreamModeEnabled() /*throw(pvpException)*/;
  int countSmartStreamModeEnabled() /*throw(pvpException)*/;
  void setSmartStreamModeEnabled(bool) /*throw(pvpException)*/;
  void reportSmartStreamModeEnabled() /*throw(pvpException)*/;

  bool availSmartStreamMode() /*throw(pvpException)*/;
  pvpAccess accessSmartStreamMode() /*throw(pvpException)*/;
  uint16_t getSmartStreamMode() /*throw(pvpException)*/;
  uint16_t minSmartStreamMode() /*throw(pvpException)*/;
  uint16_t maxSmartStreamMode() /*throw(pvpException)*/;
  uint16_t defaultSmartStreamMode() /*throw(pvpException)*/;
  uint16_t stepSmartStreamMode() /*throw(pvpException)*/;
  int countSmartStreamMode() /*throw(pvpException)*/;
  void setSmartStreamMode(uint16_t) /*throw(pvpException)*/;
  void reportSmartStreamMode() /*throw(pvpException)*/;

  bool availSmartStreamExpParams() /*throw(pvpException)*/;
  pvpAccess accessSmartStreamExpParams() /*throw(pvpException)*/;
  void * getSmartStreamExpParams() /*throw(pvpException)*/;
  void * minSmartStreamExpParams() /*throw(pvpException)*/;
  void * maxSmartStreamExpParams() /*throw(pvpException)*/;
  void * defaultSmartStreamExpParams() /*throw(pvpException)*/;
  void * stepSmartStreamExpParams() /*throw(pvpException)*/;
  int countSmartStreamExpParams() /*throw(pvpException)*/;
  void setSmartStreamExpParams(void *) /*throw(pvpException)*/;
  void reportSmartStreamExpParams() /*throw(pvpException)*/;

  bool availSmartStreamDlyParams() /*throw(pvpException)*/;
  pvpAccess accessSmartStreamDlyParams() /*throw(pvpException)*/;
  void * getSmartStreamDlyParams() /*throw(pvpException)*/;
  void * minSmartStreamDlyParams() /*throw(pvpException)*/;
  void * maxSmartStreamDlyParams() /*throw(pvpException)*/;
  void * defaultSmartStreamDlyParams() /*throw(pvpException)*/;
  void * stepSmartStreamDlyParams() /*throw(pvpException)*/;
  int countSmartStreamDlyParams() /*throw(pvpException)*/;
  void setSmartStreamDlyParams(void *) /*throw(pvpException)*/;
  void reportSmartStreamDlyParams() /*throw(pvpException)*/;

  void reportClass2() /*throw(pvpException)*/;

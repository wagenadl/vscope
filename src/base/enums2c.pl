#!/usr/bin/perl -w

use strict;

use XML::Simple;

my $infile = "enums.xml";
my $outfile = "enums.h";

usage() if @ARGV;

sub usage {
  print STDERR "Usage: enum2c.pl\n";
  print STDERR "\n";
  print STDERR "This reads '$infile' and outputs '$outfile', extracting\n";
  print STDERR "all enumeration constants that are needed at compile time.\n";
  exit 1;
}

my @output;

my $doc = XMLin($infile, ForceArray=>1, KeyAttr=>[]);

#print $doc . "\n";
#report($doc, 2);
#exit(1);

my $vsn = $doc->{"version"};
my $date = `date`; chomp $date;
my $host = `hostname`; chomp $host;
my $guardvar = uc($outfile);
$guardvar =~ s/^.*\///;
$guardvar =~ s/\./_/g;

for my $elt (@{$doc->{"enums"}->[0]->{"enum"}}) {
  parseEnum($elt->{"id"}, $elt->{"prefix"}, $elt->{"item"});
}
    

open OUT, ">$outfile";
print OUT <<"EOF";
// $outfile - created from '$infile' by '$0'
// Created: $date on $host

// DO NOT EDIT THIS FILE. CHANGES WILL BE LOST.
// (Edit '$infile' instead, then rerun '$0'.)

#ifndef $guardvar
#define $guardvar

#define ENUMS_VERSION $vsn

EOF

for (@output) {
  print OUT "$_\n";
}

print OUT <<"EOF";

#endif
EOF
close OUT;

exit 0;

######################################################################

sub getVersion {
  my $elt = shift;
  return $elt->getAttribute("date");
}

sub parseEnum {
  my $id = shift;
  my $pfx = shift;
  my $items = shift;

  $pfx = $id unless defined $pfx;
  my $lastval = undef;
  my $maxtaglen=0;
  push @output, "enum $id {";
  for (@$items) {
    my $tag = $_->{"tag"};
    my $val = (exists($_->{"value"})) 
      ? $_->{"value"}
	: (defined $lastval)
	  ? $lastval+1
	    : 0;
    $lastval = $val;
    push @output, "  ${pfx}_$tag = $val,";
  }
  push @output, "};";
  push @output, "";
}

sub report {
  my $doc = shift;
  my $dep = shift;
  for my $k (keys %$doc) {
    print " " x $dep;
    print "$k => " . $doc->{$k} . "\n";
    if (ref($doc->{$k}) eq "HASH") {
      report($doc->{$k}, $dep+2);
    } elsif (ref($doc->{$k}) eq "ARRAY") {
      reparr($doc->{$k}, $dep+2);
    }
  }
}

sub reparr {
  my $doc = shift;
  my $dep = shift;
  for my $v (@$doc) {
    print " " x $dep;
    print "$v\n";
    if (ref($v) eq "HASH") {
      report($v, $dep+2);
    } elsif (ref($v) eq "ARRAY") {
      reparr($v, $dep+2);
    }
  }
}
